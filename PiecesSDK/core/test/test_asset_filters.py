# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.asset_filters import AssetFilters  # noqa: E501

class TestAssetFilters(unittest.TestCase):
    """AssetFilters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AssetFilters:
        """Test AssetFilters
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AssetFilters`
        """
        model = AssetFilters()  # noqa: E501
        if include_optional:
            return AssetFilters(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                iterable = [
                    openapi_client.models.asset_filter.AssetFilter(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        classification = 'csx', 
                        tags = [
                            ''
                            ], 
                        websites = [
                            ''
                            ], 
                        persons = [
                            ''
                            ], 
                        phrase = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                            value = '', 
                            annotation = True, 
                            title = True, 
                            content = True, 
                            options = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                                annotation = 'DESCRIPTION', ), ), 
                        created = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                            from = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            to = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            between = True, ), 
                        updated = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                            between = True, ), 
                        operations = openapi_client.models.asset_filters.AssetFilters(
                            iterable = [
                                openapi_client.models.asset_filter.AssetFilter()
                                ], 
                            type = 'AND', ), )
                    ],
                type = 'AND'
            )
        else:
            return AssetFilters(
                iterable = [
                    openapi_client.models.asset_filter.AssetFilter(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        classification = 'csx', 
                        tags = [
                            ''
                            ], 
                        websites = [
                            ''
                            ], 
                        persons = [
                            ''
                            ], 
                        phrase = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                            value = '', 
                            annotation = True, 
                            title = True, 
                            content = True, 
                            options = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                                annotation = 'DESCRIPTION', ), ), 
                        created = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                            from = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            to = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            between = True, ), 
                        updated = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                            between = True, ), 
                        operations = openapi_client.models.asset_filters.AssetFilters(
                            iterable = [
                                openapi_client.models.asset_filter.AssetFilter()
                                ], 
                            type = 'AND', ), )
                    ],
        )
        """

    def testAssetFilters(self):
        """Test AssetFilters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
