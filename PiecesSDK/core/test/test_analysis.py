# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.analysis import Analysis  # noqa: E501

class TestAnalysis(unittest.TestCase):
    """Analysis unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Analysis:
        """Test Analysis
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Analysis`
        """
        model = Analysis()  # noqa: E501
        if include_optional:
            return Analysis(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                code = openapi_client.models.code_analysis.CodeAnalysis(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    tokenized = [
                        ''
                        ], 
                    language = '', 
                    type = 'CODE', 
                    prediction = {
                        'key' : 1.337
                        }, 
                    similarity = {
                        'key' : 1.337
                        }, 
                    top5_colors = [
                        56
                        ], 
                    top5_sorted = [
                        ''
                        ], 
                    id = '', 
                    analysis = '', 
                    model = openapi_client.models.model.Model(
                        id = '', 
                        version = '', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        name = '', 
                        description = '', 
                        cloud = True, 
                        type = 'BALANCED', 
                        usage = 'OCR', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        quantization = '', 
                        foundation = 'GPT_3.5', 
                        downloaded = True, 
                        loaded = True, 
                        unique = '', 
                        parameters = 1.337, 
                        provider = 'APPLE', 
                        cpu = True, 
                        downloading = True, ), ),
                id = '',
                format = '',
                image = openapi_client.models.image_analysis.ImageAnalysis(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '', 
                    analysis = '', 
                    ocr = openapi_client.models.ocr_analysis.OCRAnalysis(
                        id = '', 
                        raw = openapi_client.models.format.Format(
                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                            classification = openapi_client.models.classification.Classification(
                                generic = 'CODE', 
                                specific = 'csx', 
                                rendering = 'HTML', ), 
                            icon = '', 
                            role = 'ORIGINAL', 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                capabilities = 'LOCAL', 
                                mechanism = 'MANUAL', 
                                automatic_unload = True, ), 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                synced = , 
                                deleted = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                                classification = openapi_client.models.classification.Classification(
                                                    generic = 'CODE', 
                                                    specific = 'csx', ), 
                                                icon = '', 
                                                role = 'ORIGINAL', 
                                                application = openapi_client.models.application.Application(
                                                    id = '', 
                                                    name = 'SUBLIME', 
                                                    version = '', 
                                                    platform = 'WEB', 
                                                    onboarded = True, 
                                                    privacy = 'OPEN', 
                                                    automatic_unload = True, ), 
                                                asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                created = , 
                                                updated = , 
                                                cloud = '', 
                                                fragment = openapi_client.models.fragment_format.FragmentFormat(
                                                    string = openapi_client.models.transferable_string.TransferableString(
                                                        base64 = '', 
                                                        base64_url = '', 
                                                        data_url = '', ), 
                                                    metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                        ext = 'csx', ), ), 
                                                file = openapi_client.models.file_format.FileFormat(), 
                                                analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                                    code = openapi_client.models.code_analysis.CodeAnalysis(
                                                        tokenized = [
                                                            ''
                                                            ], 
                                                        language = '', 
                                                        type = 'CODE', 
                                                        prediction = {
                                                            'key' : 1.337
                                                            }, 
                                                        similarity = {
                                                            'key' : 1.337
                                                            }, 
                                                        top5_colors = [
                                                            56
                                                            ], 
                                                        top5_sorted = [
                                                            ''
                                                            ], 
                                                        id = '', 
                                                        analysis = '', 
                                                        model = openapi_client.models.model.Model(
                                                            id = '', 
                                                            version = '', 
                                                            created = , 
                                                            name = '', 
                                                            description = '', 
                                                            cloud = True, 
                                                            type = 'BALANCED', 
                                                            usage = 'OCR', 
                                                            ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                value = 33600, 
                                                                readable = '33.6 KB', ), 
                                                            quantization = '', 
                                                            foundation = 'GPT_3.5', 
                                                            downloaded = True, 
                                                            loaded = True, 
                                                            unique = '', 
                                                            parameters = 1.337, 
                                                            provider = 'APPLE', 
                                                            cpu = True, 
                                                            downloading = True, ), ), 
                                                    id = '', 
                                                    format = '', ), 
                                                relationship = openapi_client.models.relationship.Relationship(
                                                    id = '', 
                                                    embeddings = openapi_client.models.embeddings.Embeddings(
                                                        iterable = [
                                                            openapi_client.models.embedding.Embedding(
                                                                raw = [
                                                                    1.337
                                                                    ], 
                                                                model = openapi_client.models.model.Model(
                                                                    id = '', 
                                                                    version = '', 
                                                                    created = , 
                                                                    name = '', 
                                                                    description = '', 
                                                                    cloud = True, 
                                                                    type = 'BALANCED', 
                                                                    usage = 'OCR', 
                                                                    quantization = '', 
                                                                    downloaded = True, 
                                                                    loaded = True, 
                                                                    unique = '', 
                                                                    parameters = 1.337, 
                                                                    cpu = True, 
                                                                    downloading = True, ), 
                                                                created = , 
                                                                updated = , )
                                                            ], ), 
                                                    edges = openapi_client.models.edges.Edges(
                                                        iterable = [
                                                            openapi_client.models.node.Node(
                                                                id = '', 
                                                                type = 'TAG', 
                                                                root = True, 
                                                                created = , )
                                                            ], ), 
                                                    created = , 
                                                    updated = , ), 
                                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                                    iterable = [
                                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                                            id = '', )
                                                        ], ), ), )
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                    iterable = [
                                        openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                            id = '', 
                                            user = '', 
                                            link = '', 
                                            access = 'PUBLIC', 
                                            accessors = openapi_client.models.accessors.Accessors(
                                                iterable = [
                                                    openapi_client.models.accessor.Accessor(
                                                        id = '', 
                                                        os = '', 
                                                        share = '', 
                                                        count = 56, 
                                                        user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                            id = '', 
                                                            email = '', 
                                                            username = '', 
                                                            picture = '', 
                                                            vanityname = '', ), )
                                                    ], ), 
                                            created = , 
                                            short = '', 
                                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                                indices = {
                                                    'key' : 56
                                                    }, 
                                                score = openapi_client.models.score.Score(
                                                    manual = 56, 
                                                    automatic = 56, 
                                                    priority = 56, 
                                                    reuse = 56, 
                                                    update = 56, ), ), 
                                            distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                iterable = [
                                                    openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                        id = '', )
                                                    ], ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), )
                                        ], 
                                    score = , ), 
                                mechanism = 'MANUAL', 
                                websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                    iterable = [
                                        openapi_client.models.referenced_website.ReferencedWebsite(
                                            id = '', )
                                        ], ), 
                                interacted = , 
                                tags = openapi_client.models.flattened_tags.FlattenedTags(
                                    iterable = [
                                        openapi_client.models.referenced_tag.ReferencedTag(
                                            id = '', )
                                        ], ), 
                                sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                    iterable = [
                                        openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                            id = '', )
                                        ], ), 
                                persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                    iterable = [
                                        openapi_client.models.referenced_person.ReferencedPerson(
                                            id = '', )
                                        ], ), 
                                curated = True, 
                                discovered = True, 
                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                    iterable = [
                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                            id = '', )
                                        ], ), 
                                score = , 
                                favorited = True, 
                                pseudo = True, 
                                annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                    iterable = [
                                        openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                            id = '', )
                                        ], ), 
                                hints = openapi_client.models.flattened_hints.FlattenedHints(
                                    iterable = [
                                        openapi_client.models.referenced_hint.ReferencedHint(
                                            id = '', )
                                        ], ), 
                                anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                    iterable = [
                                        openapi_client.models.referenced_anchor.ReferencedAnchor(
                                            id = '', )
                                        ], ), 
                                conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                    iterable = [
                                        openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', )
                                        ], ), ), 
                            bytes = , 
                            created = , 
                            updated = , 
                            deleted = , 
                            synced = , 
                            cloud = '', 
                            fragment = openapi_client.models.fragment_format.FragmentFormat(), 
                            file = openapi_client.models.file_format.FileFormat(), 
                            analysis = openapi_client.models.analysis.Analysis(
                                id = '', 
                                format = '', ), 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = , 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            activities = openapi_client.models.activities.Activities(
                                iterable = [
                                    openapi_client.models.activity.Activity(
                                        id = '', 
                                        created = , 
                                        updated = , 
                                        event = openapi_client.models.seeded_connector_tracking.SeededConnectorTracking(
                                            format = openapi_client.models.seeded_tracked_format_event.SeededTrackedFormatEvent(
                                                identifier_description_pair = openapi_client.models.tracked_format_event_identifier_description_pairs.TrackedFormatEventIdentifierDescriptionPairs(
                                                    format_created = 'a_format_was_created', 
                                                    format_copied = 'if_a_format_was_entirely_copied', 
                                                    format_partially_copied = 'if_a_format_was_partially_copied', 
                                                    format_downloaded = 'if_a_format_was_downloaded', 
                                                    format_deleted = 'if_a_format_was_deleted', 
                                                    format_generic_classification_updated = 'if_a_generic_classification_was_changed_on_a_format', 
                                                    format_specific_classification_updated = 'if_a_specific_classification_was_changed_on_a_format', 
                                                    format_updated = 'a_format_was_updated', 
                                                    format_inserted = 'a_format_was_inserted', 
                                                    format_value_edited = 'a_format_value_was_edited', ), 
                                                format = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                    id = '102ff265-fdfb-4142-8d94-4932d400199c', ), ), 
                                            interaction = openapi_client.models.seeded_tracked_interaction_event.SeededTrackedInteractionEvent(
                                                description = '', 
                                                element = '', ), 
                                            keyboard = openapi_client.models.seeded_tracked_keyboard_event.SeededTrackedKeyboardEvent(
                                                description = '', 
                                                shortcut = [
                                                    56
                                                    ], ), 
                                            session = openapi_client.models.seeded_tracked_session_event.SeededTrackedSessionEvent(
                                                identifier_description_pair = openapi_client.models.tracked_session_event_identifier_description_pairs.TrackedSessionEventIdentifierDescriptionPairs(
                                                    session_initialized = 'a_session_has_been_initialized_and_the_application_has_been_opened', 
                                                    session_local_connection_succeeded = 'one_or_more_applications_has_successfully_connected', 
                                                    session_local_connection_failed = 'one_or_more_applications_has_failed_to_connect_locally', 
                                                    session_inactive = 'a_session_is_inactive_because_the_application_is_not_in_the_foreground', 
                                                    session_active = 'a_session_is_active_because_the_application_is_in_the_foreground', 
                                                    session_terminated = 'a_session_has_been_ended_and_the_application_has_been_closed', 
                                                    session_authenticated_with_sign_in = 'a_user_has_signed_into_this_session_with_a_an_external_account', 
                                                    session_unauthenticated_with_sign_out = 'a_user_has_signed_out_of_this_session', 
                                                    session_unauthenticated_with_dismiss = 'a_user_did_not_sign_into_the_session_with_a_dismissal', 
                                                    session_unauthenticated_with_remind = 'a_user_did_not_sign_into_the_session_with_a_reminder', 
                                                    session_onboarding_initialized = 'onboarding_has_been_initialized_for_this_session', 
                                                    session_onboarding_completed = 'onboarding_has_been_completed_for_this_session', ), ), 
                                            ml = openapi_client.models.seeded_tracked_machine_learning_event.SeededTrackedMachineLearningEvent(
                                                tlp = openapi_client.models.tlp_machine_learning_processing_event.TLPMachineLearningProcessingEvent(), 
                                                graphical = openapi_client.models.graphical_machine_learning_processing_event.GraphicalMachineLearningProcessingEvent(
                                                    svg = openapi_client.models.graphical_svg_statistics.GraphicalSVGStatistics(
                                                        id = '', ), ), ), 
                                            adoption = openapi_client.models.seeded_tracked_adoption_event.SeededTrackedAdoptionEvent(), ), 
                                        application = , 
                                        format = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                            classification = , 
                                            icon = '', 
                                            role = , 
                                            application = , 
                                            asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                            bytes = , 
                                            created = , 
                                            updated = , 
                                            cloud = '', ), 
                                        mechanism = , 
                                        rank = 56, )
                                    ], ), ), 
                        hocr = openapi_client.models.format.Format(
                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                            classification = , 
                            icon = '', 
                            role = , 
                            application = , 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = , 
                                updated = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                mechanism = , 
                                curated = True, 
                                discovered = True, 
                                favorited = True, 
                                pseudo = True, ), 
                            bytes = , 
                            created = , 
                            updated = , 
                            cloud = '', ), 
                        image = '', 
                        model = , ), )
            )
        else:
            return Analysis(
                id = '',
                format = '',
        )
        """

    def testAnalysis(self):
        """Test Analysis"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
