# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.seeded_tracked_asset_event import SeededTrackedAssetEvent  # noqa: E501

class TestSeededTrackedAssetEvent(unittest.TestCase):
    """SeededTrackedAssetEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SeededTrackedAssetEvent:
        """Test SeededTrackedAssetEvent
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SeededTrackedAssetEvent`
        """
        model = SeededTrackedAssetEvent()  # noqa: E501
        if include_optional:
            return SeededTrackedAssetEvent(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                    reference = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                        name = '', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        synced = , 
                        deleted = , 
                        formats = openapi_client.models.flattened_formats.FlattenedFormats(
                            iterable = [
                                openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                    id = '102ff265-fdfb-4142-8d94-4932d400199c', )
                                ], ), 
                        preview = openapi_client.models.flattened_preview.FlattenedPreview(
                            base = '', 
                            overlay = '', ), 
                        original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                        shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                            iterable = [
                                openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                    id = '', 
                                    user = '', 
                                    link = '', 
                                    access = 'PUBLIC', 
                                    accessors = openapi_client.models.accessors.Accessors(
                                        iterable = [
                                            openapi_client.models.accessor.Accessor(
                                                id = '', 
                                                os = '', 
                                                share = '', 
                                                count = 56, 
                                                user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                    id = '', 
                                                    email = '', 
                                                    name = '', 
                                                    username = '', 
                                                    picture = '', 
                                                    vanityname = '', ), )
                                            ], ), 
                                    created = , 
                                    short = '', 
                                    name = '', 
                                    assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                        indices = {
                                            'key' : 56
                                            }, 
                                        score = openapi_client.models.score.Score(
                                            manual = 56, 
                                            automatic = 56, 
                                            priority = 56, 
                                            reuse = 56, 
                                            update = 56, ), ), 
                                    distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                        iterable = [
                                            openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                id = '', )
                                            ], ), 
                                    score = openapi_client.models.score.Score(
                                        manual = 56, 
                                        automatic = 56, 
                                        priority = 56, 
                                        reuse = 56, 
                                        update = 56, ), )
                                ], 
                            score = , ), 
                        mechanism = 'MANUAL', 
                        websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                            iterable = [
                                openapi_client.models.referenced_website.ReferencedWebsite(
                                    id = '', )
                                ], ), 
                        interacted = , 
                        tags = openapi_client.models.flattened_tags.FlattenedTags(
                            iterable = [
                                openapi_client.models.referenced_tag.ReferencedTag(
                                    id = '', )
                                ], ), 
                        sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                            iterable = [
                                openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                    id = '', )
                                ], ), 
                        persons = openapi_client.models.flattened_persons.FlattenedPersons(
                            iterable = [
                                openapi_client.models.referenced_person.ReferencedPerson(
                                    id = '', )
                                ], ), 
                        curated = True, 
                        discovered = True, 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), 
                        score = , 
                        favorited = True, 
                        pseudo = True, 
                        annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                            iterable = [
                                openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                    id = '', )
                                ], ), 
                        hints = openapi_client.models.flattened_hints.FlattenedHints(
                            iterable = [
                                openapi_client.models.referenced_hint.ReferencedHint(
                                    id = '', )
                                ], ), 
                        anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                            iterable = [
                                openapi_client.models.referenced_anchor.ReferencedAnchor(
                                    id = '', )
                                ], ), 
                        conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                            iterable = [
                                openapi_client.models.referenced_conversation.ReferencedConversation(
                                    id = '', )
                                ], ), ), ),
                identifier_description_pair = openapi_client.models.tracked_asset_event_identifier_description_pairs.TrackedAssetEventIdentifierDescriptionPairs(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    asset_created = 'an_asset_was_created', 
                    asset_viewed = 'an_asset_was_viewed', 
                    asset_format_copied = 'an_asset_preview_format_was_copied', 
                    asset_format_downloaded = 'an_asset_format_was_downloaded', 
                    asset_deleted = 'an_asset_was_deleted', 
                    asset_description_updated = 'an_asset_was_redescribed_by_the_user', 
                    asset_name_updated = 'an_asset_was_renamed_by_the_user', 
                    asset_format_generic_classification_updated = 'a_generic_classification_was_changed_on_a_format_within_an_asset', 
                    asset_format_specific_classification_updated = 'a_specific_classification_was_changed_on_a_format_within_an_asset', 
                    asset_creation_failed = 'an_asset_failed_to_be_created', 
                    asset_tag_added = 'a_tag_was_added_by_the_user', 
                    asset_link_added = 'a_link_was_added_by_the_user', 
                    asset_link_generated = 'an_asset_link_was_generated', 
                    asset_link_deleted = 'a_link_was_deleted_by_the_user', 
                    asset_tag_deleted = 'a_tag_was_deleted_by_the_user', 
                    asset_updated = 'an_asset_was_updated', 
                    asset_format_value_edited = 'a_specific_format_value_was_edited_on_an_asset', 
                    asset_format_updated = 'a_specific_format_was_updated_on_an_asset', 
                    asset_link_revoked = 'an_asset_link_was_revoked', 
                    asset_person_added = 'a_person_was_added_by_the_user', 
                    asset_person_deleted = 'a_person_was_deleted_by_the_user', 
                    asset_sensitive_added = 'a_sensitive_was_added_by_the_user', 
                    asset_sensitive_deleted = 'a_sensitive_was_deleted_by_the_user', 
                    suggested_asset_referenced = 'a_suggested_asset_was_referenced_by_the_user', 
                    searched_asset_referenced = 'a_searched_asset_was_referenced_by_the_user', 
                    asset_referenced = 'an_asset_was_referenced_by_the_user', 
                    activity_asset_referenced = 'an_activity_asset_was_referenced_by_the_user', 
                    asset_annotation_added = 'an_annotation_was_added_by_the_user', 
                    asset_annotation_deleted = 'an_annotation_was_deleted_by_the_user', 
                    asset_annotation_updated = 'an_annotation_was_updated_by_the_user', 
                    asset_hint_added = 'a_hint_was_added_by_the_user', 
                    asset_hint_deleted = 'a_hint_was_deleted_by_the_user', 
                    asset_hint_updated = 'a_hint_was_updated_by_the_user', 
                    asset_anchor_added = 'a_anchor_was_added_by_the_user', 
                    asset_anchor_deleted = 'a_anchor_was_deleted_by_the_user', 
                    asset_anchor_updated = 'a_anchor_was_updated_by_the_user', ),
                metadata = openapi_client.models.tracked_asset_event_metadata.TrackedAssetEventMetadata(
                    reclassification = openapi_client.models.tracked_asset_event_format_reclassification_metadata.TrackedAssetEventFormatReclassificationMetadata(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        previous = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', 
                            rendering = 'HTML', ), 
                        current = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', ), ), 
                    creation = openapi_client.models.tracked_asset_event_creation_metadata.TrackedAssetEventCreationMetadata(
                        clipboard = openapi_client.models.tracked_asset_event_creation_metadata_clipboard.TrackedAssetEventCreationMetadataClipboard(
                            keyboard = True, 
                            interaction = True, ), 
                        file = openapi_client.models.tracked_asset_event_creation_metadata_file.TrackedAssetEventCreationMetadataFile(
                            keyboard = True, 
                            drag_and_drop = True, 
                            interaction = True, ), ), 
                    rename = openapi_client.models.tracked_asset_event_rename_metadata.TrackedAssetEventRenameMetadata(
                        previous = '', 
                        current = '', ), 
                    tag = openapi_client.models.referenced_tag.ReferencedTag(
                        id = '', 
                        reference = openapi_client.models.flattened_tag.FlattenedTag(
                            id = '', 
                            text = '', 
                            mechanisms = {
                                'key' : 'MANUAL'
                                }, 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                iterable = [
                                    openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', )
                                    ], 
                                indices = {
                                    'key' : 56
                                    }, 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, ), ), 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            category = 'HANDLE', 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = openapi_client.models.model.Model(
                                                id = '', 
                                                version = '', 
                                                created = , 
                                                name = '', 
                                                description = '', 
                                                cloud = True, 
                                                type = 'BALANCED', 
                                                usage = 'OCR', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                quantization = '', 
                                                foundation = 'GPT_3.5', 
                                                downloaded = True, 
                                                loaded = True, 
                                                unique = '', 
                                                parameters = 1.337, 
                                                provider = 'APPLE', 
                                                cpu = True, 
                                                downloading = True, ), 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            interactions = 56, 
                            persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                iterable = [
                                    openapi_client.models.referenced_person.ReferencedPerson(
                                        id = '', )
                                    ], ), 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), ), ), 
                    website = openapi_client.models.referenced_website.ReferencedWebsite(
                        id = '', ), 
                    person = openapi_client.models.referenced_person.ReferencedPerson(
                        id = '', ), 
                    sensitive = openapi_client.models.referenced_sensitive.ReferencedSensitive(
                        id = '', ), 
                    share = openapi_client.models.referenced_share.ReferencedShare(
                        id = '', ), 
                    search = openapi_client.models.tracked_assets_event_search_metadata.TrackedAssetsEventSearchMetadata(
                        query = '', 
                        results = openapi_client.models.tracked_assets_event_search_metadata_results.TrackedAssetsEventSearchMetadataResults(
                            fuzzy = 1.337, 
                            exact = 1.337, 
                            space = openapi_client.models.space.Space(
                                size = 56, 
                                duration = 56, ), ), ), 
                    annotation = openapi_client.models.referenced_annotation.ReferencedAnnotation(
                        id = '', ), 
                    hint = openapi_client.models.referenced_hint.ReferencedHint(
                        id = '', ), 
                    anchor = openapi_client.models.referenced_anchor.ReferencedAnchor(
                        id = '', ), )
            )
        else:
            return SeededTrackedAssetEvent(
                asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                    reference = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                        name = '', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        synced = , 
                        deleted = , 
                        formats = openapi_client.models.flattened_formats.FlattenedFormats(
                            iterable = [
                                openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                    id = '102ff265-fdfb-4142-8d94-4932d400199c', )
                                ], ), 
                        preview = openapi_client.models.flattened_preview.FlattenedPreview(
                            base = '', 
                            overlay = '', ), 
                        original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                        shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                            iterable = [
                                openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                    id = '', 
                                    user = '', 
                                    link = '', 
                                    access = 'PUBLIC', 
                                    accessors = openapi_client.models.accessors.Accessors(
                                        iterable = [
                                            openapi_client.models.accessor.Accessor(
                                                id = '', 
                                                os = '', 
                                                share = '', 
                                                count = 56, 
                                                user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                    id = '', 
                                                    email = '', 
                                                    name = '', 
                                                    username = '', 
                                                    picture = '', 
                                                    vanityname = '', ), )
                                            ], ), 
                                    created = , 
                                    short = '', 
                                    name = '', 
                                    assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                        indices = {
                                            'key' : 56
                                            }, 
                                        score = openapi_client.models.score.Score(
                                            manual = 56, 
                                            automatic = 56, 
                                            priority = 56, 
                                            reuse = 56, 
                                            update = 56, ), ), 
                                    distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                        iterable = [
                                            openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                id = '', )
                                            ], ), 
                                    score = openapi_client.models.score.Score(
                                        manual = 56, 
                                        automatic = 56, 
                                        priority = 56, 
                                        reuse = 56, 
                                        update = 56, ), )
                                ], 
                            score = , ), 
                        mechanism = 'MANUAL', 
                        websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                            iterable = [
                                openapi_client.models.referenced_website.ReferencedWebsite(
                                    id = '', )
                                ], ), 
                        interacted = , 
                        tags = openapi_client.models.flattened_tags.FlattenedTags(
                            iterable = [
                                openapi_client.models.referenced_tag.ReferencedTag(
                                    id = '', )
                                ], ), 
                        sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                            iterable = [
                                openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                    id = '', )
                                ], ), 
                        persons = openapi_client.models.flattened_persons.FlattenedPersons(
                            iterable = [
                                openapi_client.models.referenced_person.ReferencedPerson(
                                    id = '', )
                                ], ), 
                        curated = True, 
                        discovered = True, 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), 
                        score = , 
                        favorited = True, 
                        pseudo = True, 
                        annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                            iterable = [
                                openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                    id = '', )
                                ], ), 
                        hints = openapi_client.models.flattened_hints.FlattenedHints(
                            iterable = [
                                openapi_client.models.referenced_hint.ReferencedHint(
                                    id = '', )
                                ], ), 
                        anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                            iterable = [
                                openapi_client.models.referenced_anchor.ReferencedAnchor(
                                    id = '', )
                                ], ), 
                        conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                            iterable = [
                                openapi_client.models.referenced_conversation.ReferencedConversation(
                                    id = '', )
                                ], ), ), ),
                identifier_description_pair = openapi_client.models.tracked_asset_event_identifier_description_pairs.TrackedAssetEventIdentifierDescriptionPairs(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    asset_created = 'an_asset_was_created', 
                    asset_viewed = 'an_asset_was_viewed', 
                    asset_format_copied = 'an_asset_preview_format_was_copied', 
                    asset_format_downloaded = 'an_asset_format_was_downloaded', 
                    asset_deleted = 'an_asset_was_deleted', 
                    asset_description_updated = 'an_asset_was_redescribed_by_the_user', 
                    asset_name_updated = 'an_asset_was_renamed_by_the_user', 
                    asset_format_generic_classification_updated = 'a_generic_classification_was_changed_on_a_format_within_an_asset', 
                    asset_format_specific_classification_updated = 'a_specific_classification_was_changed_on_a_format_within_an_asset', 
                    asset_creation_failed = 'an_asset_failed_to_be_created', 
                    asset_tag_added = 'a_tag_was_added_by_the_user', 
                    asset_link_added = 'a_link_was_added_by_the_user', 
                    asset_link_generated = 'an_asset_link_was_generated', 
                    asset_link_deleted = 'a_link_was_deleted_by_the_user', 
                    asset_tag_deleted = 'a_tag_was_deleted_by_the_user', 
                    asset_updated = 'an_asset_was_updated', 
                    asset_format_value_edited = 'a_specific_format_value_was_edited_on_an_asset', 
                    asset_format_updated = 'a_specific_format_was_updated_on_an_asset', 
                    asset_link_revoked = 'an_asset_link_was_revoked', 
                    asset_person_added = 'a_person_was_added_by_the_user', 
                    asset_person_deleted = 'a_person_was_deleted_by_the_user', 
                    asset_sensitive_added = 'a_sensitive_was_added_by_the_user', 
                    asset_sensitive_deleted = 'a_sensitive_was_deleted_by_the_user', 
                    suggested_asset_referenced = 'a_suggested_asset_was_referenced_by_the_user', 
                    searched_asset_referenced = 'a_searched_asset_was_referenced_by_the_user', 
                    asset_referenced = 'an_asset_was_referenced_by_the_user', 
                    activity_asset_referenced = 'an_activity_asset_was_referenced_by_the_user', 
                    asset_annotation_added = 'an_annotation_was_added_by_the_user', 
                    asset_annotation_deleted = 'an_annotation_was_deleted_by_the_user', 
                    asset_annotation_updated = 'an_annotation_was_updated_by_the_user', 
                    asset_hint_added = 'a_hint_was_added_by_the_user', 
                    asset_hint_deleted = 'a_hint_was_deleted_by_the_user', 
                    asset_hint_updated = 'a_hint_was_updated_by_the_user', 
                    asset_anchor_added = 'a_anchor_was_added_by_the_user', 
                    asset_anchor_deleted = 'a_anchor_was_deleted_by_the_user', 
                    asset_anchor_updated = 'a_anchor_was_updated_by_the_user', ),
        )
        """

    def testSeededTrackedAssetEvent(self):
        """Test SeededTrackedAssetEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
