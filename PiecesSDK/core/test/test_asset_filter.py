# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.asset_filter import AssetFilter  # noqa: E501

class TestAssetFilter(unittest.TestCase):
    """AssetFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AssetFilter:
        """Test AssetFilter
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AssetFilter`
        """
        model = AssetFilter()  # noqa: E501
        if include_optional:
            return AssetFilter(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                classification = 'csx',
                tags = [
                    ''
                    ],
                websites = [
                    ''
                    ],
                persons = [
                    ''
                    ],
                phrase = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = '', 
                    annotation = True, 
                    title = True, 
                    content = True, 
                    options = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                        annotation = 'DESCRIPTION', ), ),
                created = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    from = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                        value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                    to = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                        value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                    between = True, ),
                updated = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    from = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                        value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                    to = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                        value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                    between = True, ),
                operations = openapi_client.models.asset_filters.AssetFilters(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.asset_filter.AssetFilter(
                            classification = 'csx', 
                            tags = [
                                ''
                                ], 
                            websites = [
                                ''
                                ], 
                            persons = [
                                ''
                                ], 
                            phrase = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                                value = '', 
                                annotation = True, 
                                title = True, 
                                content = True, 
                                options = openapi_client.models.asset_filter_phrase.AssetFilterPhrase(
                                    annotation = 'DESCRIPTION', ), ), 
                            created = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                                from = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                to = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                between = True, ), 
                            updated = openapi_client.models.asset_filter_timestamp.AssetFilterTimestamp(
                                between = True, ), )
                        ], 
                    type = 'AND', )
            )
        else:
            return AssetFilter(
        )
        """

    def testAssetFilter(self):
        """Test AssetFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
