# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.referenced_activity import ReferencedActivity  # noqa: E501

class TestReferencedActivity(unittest.TestCase):
    """ReferencedActivity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReferencedActivity:
        """Test ReferencedActivity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReferencedActivity`
        """
        model = ReferencedActivity()  # noqa: E501
        if include_optional:
            return ReferencedActivity(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                id = '',
                reference = openapi_client.models.flattened_activity.FlattenedActivity(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '', 
                    created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                        value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                    updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                        value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                    event = openapi_client.models.seeded_connector_tracking.SeededConnectorTracking(
                        format = openapi_client.models.seeded_tracked_format_event.SeededTrackedFormatEvent(
                            identifier_description_pair = openapi_client.models.tracked_format_event_identifier_description_pairs.TrackedFormatEventIdentifierDescriptionPairs(
                                format_created = 'a_format_was_created', 
                                format_copied = 'if_a_format_was_entirely_copied', 
                                format_partially_copied = 'if_a_format_was_partially_copied', 
                                format_downloaded = 'if_a_format_was_downloaded', 
                                format_deleted = 'if_a_format_was_deleted', 
                                format_generic_classification_updated = 'if_a_generic_classification_was_changed_on_a_format', 
                                format_specific_classification_updated = 'if_a_specific_classification_was_changed_on_a_format', 
                                format_updated = 'a_format_was_updated', 
                                format_inserted = 'a_format_was_inserted', 
                                format_value_edited = 'a_format_value_was_edited', ), 
                            format = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                            metadata = openapi_client.models.tracked_format_event_metadata.TrackedFormatEventMetadata(
                                reclassification = openapi_client.models.tracked_asset_event_format_reclassification_metadata.TrackedAssetEventFormatReclassificationMetadata(
                                    previous = openapi_client.models.classification.Classification(
                                        generic = 'CODE', 
                                        specific = 'csx', 
                                        rendering = 'HTML', ), 
                                    current = openapi_client.models.classification.Classification(
                                        generic = 'CODE', 
                                        specific = 'csx', ), ), ), ), 
                        asset = openapi_client.models.seeded_tracked_asset_event.SeededTrackedAssetEvent(
                            asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                            identifier_description_pair = openapi_client.models.tracked_asset_event_identifier_description_pairs.TrackedAssetEventIdentifierDescriptionPairs(
                                asset_created = 'an_asset_was_created', 
                                asset_viewed = 'an_asset_was_viewed', 
                                asset_format_copied = 'an_asset_preview_format_was_copied', 
                                asset_format_downloaded = 'an_asset_format_was_downloaded', 
                                asset_deleted = 'an_asset_was_deleted', 
                                asset_description_updated = 'an_asset_was_redescribed_by_the_user', 
                                asset_name_updated = 'an_asset_was_renamed_by_the_user', 
                                asset_format_generic_classification_updated = 'a_generic_classification_was_changed_on_a_format_within_an_asset', 
                                asset_format_specific_classification_updated = 'a_specific_classification_was_changed_on_a_format_within_an_asset', 
                                asset_creation_failed = 'an_asset_failed_to_be_created', 
                                asset_tag_added = 'a_tag_was_added_by_the_user', 
                                asset_link_added = 'a_link_was_added_by_the_user', 
                                asset_link_generated = 'an_asset_link_was_generated', 
                                asset_link_deleted = 'a_link_was_deleted_by_the_user', 
                                asset_tag_deleted = 'a_tag_was_deleted_by_the_user', 
                                asset_updated = 'an_asset_was_updated', 
                                asset_format_value_edited = 'a_specific_format_value_was_edited_on_an_asset', 
                                asset_format_updated = 'a_specific_format_was_updated_on_an_asset', 
                                asset_link_revoked = 'an_asset_link_was_revoked', 
                                asset_person_added = 'a_person_was_added_by_the_user', 
                                asset_person_deleted = 'a_person_was_deleted_by_the_user', 
                                asset_sensitive_added = 'a_sensitive_was_added_by_the_user', 
                                asset_sensitive_deleted = 'a_sensitive_was_deleted_by_the_user', 
                                suggested_asset_referenced = 'a_suggested_asset_was_referenced_by_the_user', 
                                searched_asset_referenced = 'a_searched_asset_was_referenced_by_the_user', 
                                asset_referenced = 'an_asset_was_referenced_by_the_user', 
                                activity_asset_referenced = 'an_activity_asset_was_referenced_by_the_user', 
                                asset_annotation_added = 'an_annotation_was_added_by_the_user', 
                                asset_annotation_deleted = 'an_annotation_was_deleted_by_the_user', 
                                asset_annotation_updated = 'an_annotation_was_updated_by_the_user', 
                                asset_hint_added = 'a_hint_was_added_by_the_user', 
                                asset_hint_deleted = 'a_hint_was_deleted_by_the_user', 
                                asset_hint_updated = 'a_hint_was_updated_by_the_user', 
                                asset_anchor_added = 'a_anchor_was_added_by_the_user', 
                                asset_anchor_deleted = 'a_anchor_was_deleted_by_the_user', 
                                asset_anchor_updated = 'a_anchor_was_updated_by_the_user', ), ), 
                        interaction = openapi_client.models.seeded_tracked_interaction_event.SeededTrackedInteractionEvent(
                            description = '', 
                            element = '', ), 
                        keyboard = openapi_client.models.seeded_tracked_keyboard_event.SeededTrackedKeyboardEvent(
                            description = '', 
                            shortcut = [
                                56
                                ], ), 
                        session = openapi_client.models.seeded_tracked_session_event.SeededTrackedSessionEvent(
                            identifier_description_pair = openapi_client.models.tracked_session_event_identifier_description_pairs.TrackedSessionEventIdentifierDescriptionPairs(
                                session_initialized = 'a_session_has_been_initialized_and_the_application_has_been_opened', 
                                session_local_connection_succeeded = 'one_or_more_applications_has_successfully_connected', 
                                session_local_connection_failed = 'one_or_more_applications_has_failed_to_connect_locally', 
                                session_inactive = 'a_session_is_inactive_because_the_application_is_not_in_the_foreground', 
                                session_active = 'a_session_is_active_because_the_application_is_in_the_foreground', 
                                session_terminated = 'a_session_has_been_ended_and_the_application_has_been_closed', 
                                session_authenticated_with_sign_in = 'a_user_has_signed_into_this_session_with_a_an_external_account', 
                                session_unauthenticated_with_sign_out = 'a_user_has_signed_out_of_this_session', 
                                session_unauthenticated_with_dismiss = 'a_user_did_not_sign_into_the_session_with_a_dismissal', 
                                session_unauthenticated_with_remind = 'a_user_did_not_sign_into_the_session_with_a_reminder', 
                                session_onboarding_initialized = 'onboarding_has_been_initialized_for_this_session', 
                                session_onboarding_completed = 'onboarding_has_been_completed_for_this_session', ), ), 
                        assets = openapi_client.models.seeded_tracked_assets_event.SeededTrackedAssetsEvent(), 
                        ml = openapi_client.models.seeded_tracked_machine_learning_event.SeededTrackedMachineLearningEvent(
                            tlp = openapi_client.models.tlp_machine_learning_processing_event.TLPMachineLearningProcessingEvent(
                                code = openapi_client.models.tlp_code_processing.TLPCodeProcessing(
                                    fragment = openapi_client.models.tlp_code_snippet_analytics.TLPCodeSnippetAnalytics(
                                        statistics = openapi_client.models.tlp_code_fragment_statistics.TLPCodeFragmentStatistics(
                                            descriptive = openapi_client.models.tlp_code_fragment_descriptive_statistics.TLPCodeFragmentDescriptiveStatistics(
                                                user = '', 
                                                os = '', 
                                                language = '', 
                                                length = 1.337, 
                                                ast = '', 
                                                timestamp = '', 
                                                asset = '', 
                                                context = '', 
                                                snippet = '', ), ), 
                                        classification = openapi_client.models.tlp_code_fragment_classification.TLPCodeFragmentClassification(
                                            asset = '', 
                                            model = '', 
                                            created = '', 
                                            classification = '', 
                                            probability = 1.337, 
                                            context = '', 
                                            distribution = '', 
                                            user = '', 
                                            latency = 1.337, 
                                            system = openapi_client.models.system_execution_information.SystemExecutionInformation(
                                                memory = 56, 
                                                os = '', 
                                                kernel = '', 
                                                cpu = openapi_client.models.system_execution_cpu_information.SystemExecutionCpuInformation(
                                                    count = 56, 
                                                    brand = '', 
                                                    frequency = 56, ), ), ), 
                                        suggested = openapi_client.models.tlp_code_snippet_suggested_interactions.TLPCodeSnippetSuggestedInteractions(
                                            save = openapi_client.models.tlp_code_fragment_suggested_save.TLPCodeFragmentSuggestedSave(
                                                asset = '', 
                                                user = '', 
                                                model = '', 
                                                created = '', 
                                                os = '', 
                                                context = '', 
                                                score = 1.337, 
                                                candidates = 56, ), 
                                            reuse = openapi_client.models.tlp_code_fragment_suggested_reuse.TLPCodeFragmentSuggestedReuse(
                                                id = '', ), ), 
                                        tagify = openapi_client.models.tlp_code_fragment_tagify.TLPCodeFragmentTagify(), 
                                        description = openapi_client.models.tlp_code_fragment_description.TLPCodeFragmentDescription(
                                            asset = '', 
                                            created = '', 
                                            model = '', 
                                            latency = 1.337, 
                                            user = '', 
                                            context = '', 
                                            os = '', ), ), 
                                    file = openapi_client.models.tlp_code_file_analytics.TLPCodeFileAnalytics(
                                        id = '', ), 
                                    directory = openapi_client.models.tlp_code_directory_analytics.TLPCodeDirectoryAnalytics(
                                        id = '', ), 
                                    repository = openapi_client.models.tlp_code_repository_analytics.TLPCodeRepositoryAnalytics(
                                        id = '', ), ), ), 
                            graphical = openapi_client.models.graphical_machine_learning_processing_event.GraphicalMachineLearningProcessingEvent(
                                ocr = openapi_client.models.graphical_ocr_processing.GraphicalOCRProcessing(), 
                                image = openapi_client.models.graphical_image_processing.GraphicalImageProcessing(), 
                                svg = openapi_client.models.graphical_svg_statistics.GraphicalSVGStatistics(
                                    id = '', ), ), ), 
                        adoption = openapi_client.models.seeded_tracked_adoption_event.SeededTrackedAdoptionEvent(), ), 
                    application = openapi_client.models.application.Application(
                        id = '', 
                        name = 'SUBLIME', 
                        version = '', 
                        platform = 'WEB', 
                        onboarded = True, 
                        privacy = 'OPEN', 
                        capabilities = 'LOCAL', 
                        mechanism = 'MANUAL', 
                        automatic_unload = True, ), 
                    deleted = , 
                    asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                    format = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                    user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                        id = '', 
                        email = '', 
                        username = '', 
                        picture = '', 
                        vanityname = '', ), 
                    mechanism = 'MANUAL', 
                    rank = 56, )
            )
        else:
            return ReferencedActivity(
                id = '',
        )
        """

    def testReferencedActivity(self):
        """Test ReferencedActivity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
