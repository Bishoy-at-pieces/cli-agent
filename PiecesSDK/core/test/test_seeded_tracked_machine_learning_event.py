# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.seeded_tracked_machine_learning_event import SeededTrackedMachineLearningEvent  # noqa: E501

class TestSeededTrackedMachineLearningEvent(unittest.TestCase):
    """SeededTrackedMachineLearningEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SeededTrackedMachineLearningEvent:
        """Test SeededTrackedMachineLearningEvent
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SeededTrackedMachineLearningEvent`
        """
        model = SeededTrackedMachineLearningEvent()  # noqa: E501
        if include_optional:
            return SeededTrackedMachineLearningEvent(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                tlp = openapi_client.models.tlp_machine_learning_processing_event.TLPMachineLearningProcessingEvent(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    code = openapi_client.models.tlp_code_processing.TLPCodeProcessing(
                        fragment = openapi_client.models.tlp_code_snippet_analytics.TLPCodeSnippetAnalytics(
                            statistics = openapi_client.models.tlp_code_fragment_statistics.TLPCodeFragmentStatistics(
                                descriptive = openapi_client.models.tlp_code_fragment_descriptive_statistics.TLPCodeFragmentDescriptiveStatistics(
                                    user = '', 
                                    os = '', 
                                    language = '', 
                                    length = 1.337, 
                                    ast = '', 
                                    timestamp = '', 
                                    asset = '', 
                                    context = '', 
                                    snippet = '', ), ), 
                            classification = openapi_client.models.tlp_code_fragment_classification.TLPCodeFragmentClassification(
                                asset = '', 
                                model = '', 
                                created = '', 
                                classification = '', 
                                probability = 1.337, 
                                context = '', 
                                distribution = '', 
                                metadata = openapi_client.models.tlp_code_fragment_classification_metadata.TLPCodeFragmentClassificationMetadata(
                                    context = openapi_client.models.classification.Classification(
                                        generic = 'CODE', 
                                        specific = 'csx', 
                                        rendering = 'HTML', ), 
                                    prior = openapi_client.models.classification.Classification(
                                        generic = 'CODE', 
                                        specific = 'csx', ), ), 
                                user = '', 
                                latency = 1.337, 
                                system = openapi_client.models.system_execution_information.SystemExecutionInformation(
                                    memory = 56, 
                                    os = '', 
                                    kernel = '', 
                                    cpu = openapi_client.models.system_execution_cpu_information.SystemExecutionCpuInformation(
                                        count = 56, 
                                        brand = '', 
                                        frequency = 56, ), ), ), 
                            reclassification = openapi_client.models.tlp_code_fragment_reclassification.TLPCodeFragmentReclassification(
                                asset = '', 
                                model = '', 
                                created = '', 
                                updates = openapi_client.models.tlp_code_fragment_reclassification_updates.TLPCodeFragmentReclassificationUpdates(
                                    previous = , 
                                    current = , ), 
                                user = '', 
                                context = '', ), 
                            suggested = openapi_client.models.tlp_code_snippet_suggested_interactions.TLPCodeSnippetSuggestedInteractions(
                                save = openapi_client.models.tlp_code_fragment_suggested_save.TLPCodeFragmentSuggestedSave(
                                    asset = '', 
                                    user = '', 
                                    model = '', 
                                    created = '', 
                                    os = '', 
                                    score = 1.337, 
                                    candidates = 56, ), 
                                reuse = openapi_client.models.tlp_code_fragment_suggested_reuse.TLPCodeFragmentSuggestedReuse(
                                    id = '', ), ), 
                            tagify = openapi_client.models.tlp_code_fragment_tagify.TLPCodeFragmentTagify(), 
                            description = openapi_client.models.tlp_code_fragment_description.TLPCodeFragmentDescription(
                                asset = '', 
                                created = '', 
                                model = '', 
                                latency = 1.337, 
                                user = '', 
                                os = '', ), ), 
                        file = openapi_client.models.tlp_code_file_analytics.TLPCodeFileAnalytics(
                            id = '', ), 
                        directory = openapi_client.models.tlp_code_directory_analytics.TLPCodeDirectoryAnalytics(
                            id = '', ), 
                        repository = openapi_client.models.tlp_code_repository_analytics.TLPCodeRepositoryAnalytics(
                            id = '', ), ), ),
                graphical = openapi_client.models.graphical_machine_learning_processing_event.GraphicalMachineLearningProcessingEvent(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    ocr = openapi_client.models.graphical_ocr_processing.GraphicalOCRProcessing(
                        statistics = openapi_client.models.graphical_ocr_statistics.GraphicalOCRStatistics(
                            descriptive = openapi_client.models.graphical_ocr_descriptive_statistics.GraphicalOCRDescriptiveStatistics(
                                asset = '', 
                                user = '', 
                                model = '', 
                                created = '', 
                                os = '', 
                                confidence = openapi_client.models.graphical_ocr_descriptive_statistics_confidence.GraphicalOCRDescriptiveStatistics_confidence(
                                    mean = '', ), 
                                duration = '', ), ), ), 
                    image = openapi_client.models.graphical_image_processing.GraphicalImageProcessing(), 
                    svg = openapi_client.models.graphical_svg_statistics.GraphicalSVGStatistics(
                        id = '', ), )
            )
        else:
            return SeededTrackedMachineLearningEvent(
        )
        """

    def testSeededTrackedMachineLearningEvent(self):
        """Test SeededTrackedMachineLearningEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
