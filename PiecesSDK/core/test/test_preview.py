# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.preview import Preview  # noqa: E501

class TestPreview(unittest.TestCase):
    """Preview unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Preview:
        """Test Preview
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Preview`
        """
        model = Preview()  # noqa: E501
        if include_optional:
            return Preview(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                base = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                    reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        classification = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', 
                            rendering = 'HTML', ), 
                        icon = '', 
                        role = 'ORIGINAL', 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        synced = , 
                        cloud = '', 
                        fragment = openapi_client.models.fragment_format.FragmentFormat(
                            string = openapi_client.models.transferable_string.TransferableString(
                                raw = '', 
                                base64 = '', 
                                base64_url = '', 
                                data_url = '', ), 
                            metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                ext = 'csx', ), ), 
                        file = openapi_client.models.file_format.FileFormat(), 
                        analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                            code = openapi_client.models.code_analysis.CodeAnalysis(
                                tokenized = [
                                    ''
                                    ], 
                                language = '', 
                                type = 'CODE', 
                                prediction = {
                                    'key' : 1.337
                                    }, 
                                similarity = {
                                    'key' : 1.337
                                    }, 
                                top5_colors = [
                                    56
                                    ], 
                                top5_sorted = [
                                    ''
                                    ], 
                                id = '', 
                                analysis = '', 
                                model = openapi_client.models.model.Model(
                                    id = '', 
                                    version = '', 
                                    created = , 
                                    name = '', 
                                    description = '', 
                                    cloud = True, 
                                    type = 'BALANCED', 
                                    usage = 'OCR', 
                                    ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                        value = 33600, 
                                        readable = '33.6 KB', ), 
                                    quantization = '', 
                                    foundation = 'GPT_3.5', 
                                    downloaded = True, 
                                    loaded = True, 
                                    unique = '', 
                                    parameters = 1.337, 
                                    provider = 'APPLE', 
                                    cpu = True, 
                                    downloading = True, ), ), 
                            id = '', 
                            format = '', 
                            image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                id = '', 
                                ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                    id = '', 
                                    raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                        id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                    hocr = , 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        quantization = '', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        cpu = True, 
                                        downloading = True, ), 
                                    image = '', ), 
                                analysis = '', ), ), 
                        relationship = openapi_client.models.relationship.Relationship(
                            id = '', 
                            embeddings = openapi_client.models.embeddings.Embeddings(
                                iterable = [
                                    openapi_client.models.embedding.Embedding(
                                        raw = [
                                            1.337
                                            ], 
                                        model = , 
                                        created = , 
                                        updated = , )
                                    ], ), 
                            edges = openapi_client.models.edges.Edges(
                                iterable = [
                                    openapi_client.models.node.Node(
                                        id = '', 
                                        type = 'TAG', 
                                        root = True, 
                                        created = , )
                                    ], ), 
                            created = , 
                            updated = , ), 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), ), ),
                overlay = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                    reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        classification = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', 
                            rendering = 'HTML', ), 
                        icon = '', 
                        role = 'ORIGINAL', 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        synced = , 
                        cloud = '', 
                        fragment = openapi_client.models.fragment_format.FragmentFormat(
                            string = openapi_client.models.transferable_string.TransferableString(
                                raw = '', 
                                base64 = '', 
                                base64_url = '', 
                                data_url = '', ), 
                            metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                ext = 'csx', ), ), 
                        file = openapi_client.models.file_format.FileFormat(), 
                        analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                            code = openapi_client.models.code_analysis.CodeAnalysis(
                                tokenized = [
                                    ''
                                    ], 
                                language = '', 
                                type = 'CODE', 
                                prediction = {
                                    'key' : 1.337
                                    }, 
                                similarity = {
                                    'key' : 1.337
                                    }, 
                                top5_colors = [
                                    56
                                    ], 
                                top5_sorted = [
                                    ''
                                    ], 
                                id = '', 
                                analysis = '', 
                                model = openapi_client.models.model.Model(
                                    id = '', 
                                    version = '', 
                                    created = , 
                                    name = '', 
                                    description = '', 
                                    cloud = True, 
                                    type = 'BALANCED', 
                                    usage = 'OCR', 
                                    ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                        value = 33600, 
                                        readable = '33.6 KB', ), 
                                    quantization = '', 
                                    foundation = 'GPT_3.5', 
                                    downloaded = True, 
                                    loaded = True, 
                                    unique = '', 
                                    parameters = 1.337, 
                                    provider = 'APPLE', 
                                    cpu = True, 
                                    downloading = True, ), ), 
                            id = '', 
                            format = '', 
                            image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                id = '', 
                                ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                    id = '', 
                                    raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                        id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                    hocr = , 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        quantization = '', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        cpu = True, 
                                        downloading = True, ), 
                                    image = '', ), 
                                analysis = '', ), ), 
                        relationship = openapi_client.models.relationship.Relationship(
                            id = '', 
                            embeddings = openapi_client.models.embeddings.Embeddings(
                                iterable = [
                                    openapi_client.models.embedding.Embedding(
                                        raw = [
                                            1.337
                                            ], 
                                        model = , 
                                        created = , 
                                        updated = , )
                                    ], ), 
                            edges = openapi_client.models.edges.Edges(
                                iterable = [
                                    openapi_client.models.node.Node(
                                        id = '', 
                                        type = 'TAG', 
                                        root = True, 
                                        created = , )
                                    ], ), 
                            created = , 
                            updated = , ), 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), ), )
            )
        else:
            return Preview(
                base = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                    reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        classification = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', 
                            rendering = 'HTML', ), 
                        icon = '', 
                        role = 'ORIGINAL', 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        synced = , 
                        cloud = '', 
                        fragment = openapi_client.models.fragment_format.FragmentFormat(
                            string = openapi_client.models.transferable_string.TransferableString(
                                raw = '', 
                                base64 = '', 
                                base64_url = '', 
                                data_url = '', ), 
                            metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                ext = 'csx', ), ), 
                        file = openapi_client.models.file_format.FileFormat(), 
                        analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                            code = openapi_client.models.code_analysis.CodeAnalysis(
                                tokenized = [
                                    ''
                                    ], 
                                language = '', 
                                type = 'CODE', 
                                prediction = {
                                    'key' : 1.337
                                    }, 
                                similarity = {
                                    'key' : 1.337
                                    }, 
                                top5_colors = [
                                    56
                                    ], 
                                top5_sorted = [
                                    ''
                                    ], 
                                id = '', 
                                analysis = '', 
                                model = openapi_client.models.model.Model(
                                    id = '', 
                                    version = '', 
                                    created = , 
                                    name = '', 
                                    description = '', 
                                    cloud = True, 
                                    type = 'BALANCED', 
                                    usage = 'OCR', 
                                    ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                        value = 33600, 
                                        readable = '33.6 KB', ), 
                                    quantization = '', 
                                    foundation = 'GPT_3.5', 
                                    downloaded = True, 
                                    loaded = True, 
                                    unique = '', 
                                    parameters = 1.337, 
                                    provider = 'APPLE', 
                                    cpu = True, 
                                    downloading = True, ), ), 
                            id = '', 
                            format = '', 
                            image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                id = '', 
                                ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                    id = '', 
                                    raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                        id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                    hocr = , 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        quantization = '', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        cpu = True, 
                                        downloading = True, ), 
                                    image = '', ), 
                                analysis = '', ), ), 
                        relationship = openapi_client.models.relationship.Relationship(
                            id = '', 
                            embeddings = openapi_client.models.embeddings.Embeddings(
                                iterable = [
                                    openapi_client.models.embedding.Embedding(
                                        raw = [
                                            1.337
                                            ], 
                                        model = , 
                                        created = , 
                                        updated = , )
                                    ], ), 
                            edges = openapi_client.models.edges.Edges(
                                iterable = [
                                    openapi_client.models.node.Node(
                                        id = '', 
                                        type = 'TAG', 
                                        root = True, 
                                        created = , )
                                    ], ), 
                            created = , 
                            updated = , ), 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), ), ),
        )
        """

    def testPreview(self):
        """Test Preview"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
