# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.seeded_discoverable_asset import SeededDiscoverableAsset  # noqa: E501

class TestSeededDiscoverableAsset(unittest.TestCase):
    """SeededDiscoverableAsset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SeededDiscoverableAsset:
        """Test SeededDiscoverableAsset
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SeededDiscoverableAsset`
        """
        model = SeededDiscoverableAsset()  # noqa: E501
        if include_optional:
            return SeededDiscoverableAsset(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                file = openapi_client.models.seeded_file.SeededFile(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    bytes = openapi_client.models.transferable_bytes.TransferableBytes(
                        raw = [
                            56
                            ], 
                        base64 = [
                            56
                            ], 
                        base64_url = [
                            56
                            ], 
                        data_url = [
                            56
                            ], ), 
                    string = openapi_client.models.transferable_string.TransferableString(), 
                    metadata = openapi_client.models.file_metadata.FileMetadata(
                        name = '', 
                        ext = 'csx', 
                        size = 56, ), ),
                fragment = openapi_client.models.seeded_fragment.SeededFragment(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    string = openapi_client.models.transferable_string.TransferableString(
                        raw = '', 
                        base64 = '', 
                        base64_url = '', 
                        data_url = '', ), 
                    bytes = openapi_client.models.transferable_bytes.TransferableBytes(
                        raw = [
                            56
                            ], 
                        base64 = [
                            56
                            ], 
                        base64_url = [
                            56
                            ], 
                        data_url = [
                            56
                            ], ), 
                    metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                        ext = 'csx', ), ),
                directory = '',
                filters = openapi_client.models.tlp_directed_discovery_filters.TLPDirectedDiscoveryFilters(
                    iterable = [
                        openapi_client.models.tlp_directed_discovery_filter.TLPDirectedDiscoveryFilter(
                            name = 'FUNCTION', )
                        ], )
            )
        else:
            return SeededDiscoverableAsset(
        )
        """

    def testSeededDiscoverableAsset(self):
        """Test SeededDiscoverableAsset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
