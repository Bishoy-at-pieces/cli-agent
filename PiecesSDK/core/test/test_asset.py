# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.asset import Asset  # noqa: E501

class TestAsset(unittest.TestCase):
    """Asset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Asset:
        """Test Asset
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Asset`
        """
        model = Asset()  # noqa: E501
        if include_optional:
            return Asset(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                id = '2254f2c8-5797-40e8-ac56-41166dc0e159',
                name = '',
                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08',
                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                synced = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                deleted = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                formats = openapi_client.models.formats.Formats(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.format.Format(
                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                            classification = openapi_client.models.classification.Classification(
                                generic = 'CODE', 
                                specific = 'csx', 
                                rendering = 'HTML', ), 
                            icon = '', 
                            role = 'ORIGINAL', 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                capabilities = 'LOCAL', 
                                mechanism = 'MANUAL', 
                                automatic_unload = True, ), 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                synced = , 
                                deleted = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                                classification = openapi_client.models.classification.Classification(
                                                    generic = 'CODE', 
                                                    specific = 'csx', ), 
                                                icon = '', 
                                                role = 'ORIGINAL', 
                                                application = openapi_client.models.application.Application(
                                                    id = '', 
                                                    name = 'SUBLIME', 
                                                    version = '', 
                                                    platform = 'WEB', 
                                                    onboarded = True, 
                                                    privacy = 'OPEN', 
                                                    automatic_unload = True, ), 
                                                asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                created = , 
                                                updated = , 
                                                cloud = '', 
                                                fragment = openapi_client.models.fragment_format.FragmentFormat(
                                                    string = openapi_client.models.transferable_string.TransferableString(
                                                        raw = '', 
                                                        base64 = '', 
                                                        base64_url = '', 
                                                        data_url = '', ), 
                                                    metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                        ext = 'csx', ), ), 
                                                file = openapi_client.models.file_format.FileFormat(), 
                                                analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                                    code = openapi_client.models.code_analysis.CodeAnalysis(
                                                        tokenized = [
                                                            ''
                                                            ], 
                                                        language = '', 
                                                        type = 'CODE', 
                                                        prediction = {
                                                            'key' : 1.337
                                                            }, 
                                                        similarity = {
                                                            'key' : 1.337
                                                            }, 
                                                        top5_colors = [
                                                            56
                                                            ], 
                                                        top5_sorted = [
                                                            ''
                                                            ], 
                                                        id = '', 
                                                        analysis = '', 
                                                        model = openapi_client.models.model.Model(
                                                            id = '', 
                                                            version = '', 
                                                            created = , 
                                                            name = '', 
                                                            description = '', 
                                                            cloud = True, 
                                                            type = 'BALANCED', 
                                                            usage = 'OCR', 
                                                            ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                value = 33600, 
                                                                readable = '33.6 KB', ), 
                                                            quantization = '', 
                                                            foundation = 'GPT_3.5', 
                                                            downloaded = True, 
                                                            loaded = True, 
                                                            unique = '', 
                                                            parameters = 1.337, 
                                                            provider = 'APPLE', 
                                                            cpu = True, 
                                                            downloading = True, ), ), 
                                                    id = '', 
                                                    format = '', 
                                                    image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                                        id = '', 
                                                        ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                                            id = '', 
                                                            raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                                            hocr = , 
                                                            model = openapi_client.models.model.Model(
                                                                id = '', 
                                                                version = '', 
                                                                created = , 
                                                                name = '', 
                                                                description = '', 
                                                                cloud = True, 
                                                                type = 'BALANCED', 
                                                                usage = 'OCR', 
                                                                quantization = '', 
                                                                downloaded = True, 
                                                                loaded = True, 
                                                                unique = '', 
                                                                parameters = 1.337, 
                                                                cpu = True, 
                                                                downloading = True, ), 
                                                            image = '', ), 
                                                        analysis = '', ), ), 
                                                relationship = openapi_client.models.relationship.Relationship(
                                                    id = '', 
                                                    embeddings = openapi_client.models.embeddings.Embeddings(
                                                        iterable = [
                                                            openapi_client.models.embedding.Embedding(
                                                                raw = [
                                                                    1.337
                                                                    ], 
                                                                model = , 
                                                                created = , 
                                                                updated = , )
                                                            ], ), 
                                                    edges = openapi_client.models.edges.Edges(
                                                        iterable = [
                                                            openapi_client.models.node.Node(
                                                                id = '', 
                                                                type = 'TAG', 
                                                                root = True, 
                                                                created = , )
                                                            ], ), 
                                                    created = , 
                                                    updated = , ), 
                                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                                    iterable = [
                                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                                            id = '', )
                                                        ], ), ), )
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                    iterable = [
                                        openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                            id = '', 
                                            user = '', 
                                            link = '', 
                                            access = 'PUBLIC', 
                                            accessors = openapi_client.models.accessors.Accessors(
                                                iterable = [
                                                    openapi_client.models.accessor.Accessor(
                                                        id = '', 
                                                        os = '', 
                                                        share = '', 
                                                        count = 56, 
                                                        user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                            id = '', 
                                                            email = '', 
                                                            username = '', 
                                                            picture = '', 
                                                            vanityname = '', ), )
                                                    ], ), 
                                            created = , 
                                            short = '', 
                                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                                indices = {
                                                    'key' : 56
                                                    }, 
                                                score = openapi_client.models.score.Score(
                                                    manual = 56, 
                                                    automatic = 56, 
                                                    priority = 56, 
                                                    reuse = 56, 
                                                    update = 56, ), ), 
                                            distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                iterable = [
                                                    openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                        id = '', )
                                                    ], ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), )
                                        ], 
                                    score = , ), 
                                mechanism = 'MANUAL', 
                                websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                    iterable = [
                                        openapi_client.models.referenced_website.ReferencedWebsite(
                                            id = '', )
                                        ], ), 
                                interacted = , 
                                tags = openapi_client.models.flattened_tags.FlattenedTags(
                                    iterable = [
                                        openapi_client.models.referenced_tag.ReferencedTag(
                                            id = '', )
                                        ], ), 
                                sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                    iterable = [
                                        openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                            id = '', )
                                        ], ), 
                                persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                    iterable = [
                                        openapi_client.models.referenced_person.ReferencedPerson(
                                            id = '', )
                                        ], ), 
                                curated = True, 
                                discovered = True, 
                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                    iterable = [
                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                            id = '', )
                                        ], ), 
                                score = , 
                                favorited = True, 
                                pseudo = True, 
                                annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                    iterable = [
                                        openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                            id = '', )
                                        ], ), 
                                hints = openapi_client.models.flattened_hints.FlattenedHints(
                                    iterable = [
                                        openapi_client.models.referenced_hint.ReferencedHint(
                                            id = '', )
                                        ], ), 
                                anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                    iterable = [
                                        openapi_client.models.referenced_anchor.ReferencedAnchor(
                                            id = '', )
                                        ], ), 
                                conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                    iterable = [
                                        openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', )
                                        ], ), ), 
                            bytes = , 
                            created = , 
                            updated = , 
                            deleted = , 
                            synced = , 
                            cloud = '', 
                            fragment = openapi_client.models.fragment_format.FragmentFormat(), 
                            file = openapi_client.models.file_format.FileFormat(), 
                            analysis = openapi_client.models.analysis.Analysis(
                                id = '', 
                                format = '', ), 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = , 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            activities = openapi_client.models.activities.Activities(
                                iterable = [
                                    openapi_client.models.activity.Activity(
                                        id = '', 
                                        created = , 
                                        updated = , 
                                        event = openapi_client.models.seeded_connector_tracking.SeededConnectorTracking(
                                            format = openapi_client.models.seeded_tracked_format_event.SeededTrackedFormatEvent(
                                                identifier_description_pair = openapi_client.models.tracked_format_event_identifier_description_pairs.TrackedFormatEventIdentifierDescriptionPairs(
                                                    format_created = 'a_format_was_created', 
                                                    format_copied = 'if_a_format_was_entirely_copied', 
                                                    format_partially_copied = 'if_a_format_was_partially_copied', 
                                                    format_downloaded = 'if_a_format_was_downloaded', 
                                                    format_deleted = 'if_a_format_was_deleted', 
                                                    format_generic_classification_updated = 'if_a_generic_classification_was_changed_on_a_format', 
                                                    format_specific_classification_updated = 'if_a_specific_classification_was_changed_on_a_format', 
                                                    format_updated = 'a_format_was_updated', 
                                                    format_inserted = 'a_format_was_inserted', 
                                                    format_value_edited = 'a_format_value_was_edited', ), 
                                                format = , ), 
                                            interaction = openapi_client.models.seeded_tracked_interaction_event.SeededTrackedInteractionEvent(
                                                description = '', 
                                                element = '', ), 
                                            keyboard = openapi_client.models.seeded_tracked_keyboard_event.SeededTrackedKeyboardEvent(
                                                description = '', 
                                                shortcut = [
                                                    56
                                                    ], ), 
                                            session = openapi_client.models.seeded_tracked_session_event.SeededTrackedSessionEvent(
                                                identifier_description_pair = openapi_client.models.tracked_session_event_identifier_description_pairs.TrackedSessionEventIdentifierDescriptionPairs(
                                                    session_initialized = 'a_session_has_been_initialized_and_the_application_has_been_opened', 
                                                    session_local_connection_succeeded = 'one_or_more_applications_has_successfully_connected', 
                                                    session_local_connection_failed = 'one_or_more_applications_has_failed_to_connect_locally', 
                                                    session_inactive = 'a_session_is_inactive_because_the_application_is_not_in_the_foreground', 
                                                    session_active = 'a_session_is_active_because_the_application_is_in_the_foreground', 
                                                    session_terminated = 'a_session_has_been_ended_and_the_application_has_been_closed', 
                                                    session_authenticated_with_sign_in = 'a_user_has_signed_into_this_session_with_a_an_external_account', 
                                                    session_unauthenticated_with_sign_out = 'a_user_has_signed_out_of_this_session', 
                                                    session_unauthenticated_with_dismiss = 'a_user_did_not_sign_into_the_session_with_a_dismissal', 
                                                    session_unauthenticated_with_remind = 'a_user_did_not_sign_into_the_session_with_a_reminder', 
                                                    session_onboarding_initialized = 'onboarding_has_been_initialized_for_this_session', 
                                                    session_onboarding_completed = 'onboarding_has_been_completed_for_this_session', ), ), 
                                            ml = openapi_client.models.seeded_tracked_machine_learning_event.SeededTrackedMachineLearningEvent(
                                                tlp = openapi_client.models.tlp_machine_learning_processing_event.TLPMachineLearningProcessingEvent(), 
                                                graphical = openapi_client.models.graphical_machine_learning_processing_event.GraphicalMachineLearningProcessingEvent(
                                                    svg = openapi_client.models.graphical_svg_statistics.GraphicalSVGStatistics(
                                                        id = '', ), ), ), 
                                            adoption = openapi_client.models.seeded_tracked_adoption_event.SeededTrackedAdoptionEvent(), ), 
                                        application = , 
                                        format = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                            classification = , 
                                            icon = '', 
                                            role = , 
                                            application = , 
                                            asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                            bytes = , 
                                            created = , 
                                            updated = , 
                                            cloud = '', ), 
                                        mechanism = , 
                                        rank = 56, )
                                    ], ), )
                        ], ),
                preview = openapi_client.models.preview.Preview(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    base = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                            classification = openapi_client.models.classification.Classification(
                                generic = 'CODE', 
                                specific = 'csx', 
                                rendering = 'HTML', ), 
                            icon = '', 
                            role = 'ORIGINAL', 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                capabilities = 'LOCAL', 
                                mechanism = 'MANUAL', 
                                automatic_unload = True, ), 
                            asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                            bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                value = 33600, 
                                readable = '33.6 KB', ), 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            synced = , 
                            cloud = '', 
                            fragment = openapi_client.models.fragment_format.FragmentFormat(
                                string = openapi_client.models.transferable_string.TransferableString(
                                    raw = '', 
                                    base64 = '', 
                                    base64_url = '', 
                                    data_url = '', ), 
                                metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                    ext = 'csx', ), ), 
                            file = openapi_client.models.file_format.FileFormat(), 
                            analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                code = openapi_client.models.code_analysis.CodeAnalysis(
                                    tokenized = [
                                        ''
                                        ], 
                                    language = '', 
                                    type = 'CODE', 
                                    prediction = {
                                        'key' : 1.337
                                        }, 
                                    similarity = {
                                        'key' : 1.337
                                        }, 
                                    top5_colors = [
                                        56
                                        ], 
                                    top5_sorted = [
                                        ''
                                        ], 
                                    id = '', 
                                    analysis = '', 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                            value = 33600, 
                                            readable = '33.6 KB', ), 
                                        quantization = '', 
                                        foundation = 'GPT_3.5', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        provider = 'APPLE', 
                                        cpu = True, 
                                        downloading = True, ), ), 
                                id = '', 
                                format = '', 
                                image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                    id = '', 
                                    ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                        id = '', 
                                        raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                        hocr = , 
                                        model = openapi_client.models.model.Model(
                                            id = '', 
                                            version = '', 
                                            created = , 
                                            name = '', 
                                            description = '', 
                                            cloud = True, 
                                            type = 'BALANCED', 
                                            usage = 'OCR', 
                                            quantization = '', 
                                            downloaded = True, 
                                            loaded = True, 
                                            unique = '', 
                                            parameters = 1.337, 
                                            cpu = True, 
                                            downloading = True, ), 
                                        image = '', ), 
                                    analysis = '', ), ), 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = , 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                iterable = [
                                    openapi_client.models.referenced_activity.ReferencedActivity(
                                        id = '', )
                                    ], ), ), ), 
                    overlay = , ),
                original = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                    reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        classification = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', 
                            rendering = 'HTML', ), 
                        icon = '', 
                        role = 'ORIGINAL', 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        synced = , 
                        cloud = '', 
                        fragment = openapi_client.models.fragment_format.FragmentFormat(
                            string = openapi_client.models.transferable_string.TransferableString(
                                raw = '', 
                                base64 = '', 
                                base64_url = '', 
                                data_url = '', ), 
                            metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                ext = 'csx', ), ), 
                        file = openapi_client.models.file_format.FileFormat(), 
                        analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                            code = openapi_client.models.code_analysis.CodeAnalysis(
                                tokenized = [
                                    ''
                                    ], 
                                language = '', 
                                type = 'CODE', 
                                prediction = {
                                    'key' : 1.337
                                    }, 
                                similarity = {
                                    'key' : 1.337
                                    }, 
                                top5_colors = [
                                    56
                                    ], 
                                top5_sorted = [
                                    ''
                                    ], 
                                id = '', 
                                analysis = '', 
                                model = openapi_client.models.model.Model(
                                    id = '', 
                                    version = '', 
                                    created = , 
                                    name = '', 
                                    description = '', 
                                    cloud = True, 
                                    type = 'BALANCED', 
                                    usage = 'OCR', 
                                    ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                        value = 33600, 
                                        readable = '33.6 KB', ), 
                                    quantization = '', 
                                    foundation = 'GPT_3.5', 
                                    downloaded = True, 
                                    loaded = True, 
                                    unique = '', 
                                    parameters = 1.337, 
                                    provider = 'APPLE', 
                                    cpu = True, 
                                    downloading = True, ), ), 
                            id = '', 
                            format = '', 
                            image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                id = '', 
                                ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                    id = '', 
                                    raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                        id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                    hocr = , 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        quantization = '', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        cpu = True, 
                                        downloading = True, ), 
                                    image = '', ), 
                                analysis = '', ), ), 
                        relationship = openapi_client.models.relationship.Relationship(
                            id = '', 
                            embeddings = openapi_client.models.embeddings.Embeddings(
                                iterable = [
                                    openapi_client.models.embedding.Embedding(
                                        raw = [
                                            1.337
                                            ], 
                                        model = , 
                                        created = , 
                                        updated = , )
                                    ], ), 
                            edges = openapi_client.models.edges.Edges(
                                iterable = [
                                    openapi_client.models.node.Node(
                                        id = '', 
                                        type = 'TAG', 
                                        root = True, 
                                        created = , )
                                    ], ), 
                            created = , 
                            updated = , ), 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), ), ),
                shares = openapi_client.models.shares.Shares(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.share.Share(
                            id = '', 
                            user = '', 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                name = '', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                synced = , 
                                deleted = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                                classification = openapi_client.models.classification.Classification(
                                                    generic = 'CODE', 
                                                    specific = 'csx', 
                                                    rendering = 'HTML', ), 
                                                icon = '', 
                                                role = 'ORIGINAL', 
                                                application = openapi_client.models.application.Application(
                                                    id = '', 
                                                    name = 'SUBLIME', 
                                                    version = '', 
                                                    platform = 'WEB', 
                                                    onboarded = True, 
                                                    privacy = 'OPEN', 
                                                    capabilities = 'LOCAL', 
                                                    mechanism = 'MANUAL', 
                                                    automatic_unload = True, ), 
                                                asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                created = , 
                                                updated = , 
                                                cloud = '', 
                                                fragment = openapi_client.models.fragment_format.FragmentFormat(
                                                    string = openapi_client.models.transferable_string.TransferableString(
                                                        raw = '', 
                                                        base64 = '', 
                                                        base64_url = '', 
                                                        data_url = '', ), 
                                                    metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                        ext = 'csx', ), ), 
                                                file = openapi_client.models.file_format.FileFormat(), 
                                                analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                                    code = openapi_client.models.code_analysis.CodeAnalysis(
                                                        tokenized = [
                                                            ''
                                                            ], 
                                                        language = '', 
                                                        type = 'CODE', 
                                                        prediction = {
                                                            'key' : 1.337
                                                            }, 
                                                        similarity = {
                                                            'key' : 1.337
                                                            }, 
                                                        top5_colors = [
                                                            56
                                                            ], 
                                                        top5_sorted = [
                                                            ''
                                                            ], 
                                                        id = '', 
                                                        analysis = '', 
                                                        model = openapi_client.models.model.Model(
                                                            id = '', 
                                                            version = '', 
                                                            created = , 
                                                            name = '', 
                                                            description = '', 
                                                            cloud = True, 
                                                            type = 'BALANCED', 
                                                            usage = 'OCR', 
                                                            ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                value = 33600, 
                                                                readable = '33.6 KB', ), 
                                                            quantization = '', 
                                                            foundation = 'GPT_3.5', 
                                                            downloaded = True, 
                                                            loaded = True, 
                                                            unique = '', 
                                                            parameters = 1.337, 
                                                            provider = 'APPLE', 
                                                            cpu = True, 
                                                            downloading = True, ), ), 
                                                    id = '', 
                                                    format = '', 
                                                    image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                                        id = '', 
                                                        ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                                            id = '', 
                                                            raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                                            hocr = , 
                                                            model = openapi_client.models.model.Model(
                                                                id = '', 
                                                                version = '', 
                                                                created = , 
                                                                name = '', 
                                                                description = '', 
                                                                cloud = True, 
                                                                type = 'BALANCED', 
                                                                usage = 'OCR', 
                                                                quantization = '', 
                                                                downloaded = True, 
                                                                loaded = True, 
                                                                unique = '', 
                                                                parameters = 1.337, 
                                                                cpu = True, 
                                                                downloading = True, ), 
                                                            image = '', ), 
                                                        analysis = '', ), ), 
                                                relationship = openapi_client.models.relationship.Relationship(
                                                    id = '', 
                                                    embeddings = openapi_client.models.embeddings.Embeddings(
                                                        iterable = [
                                                            openapi_client.models.embedding.Embedding(
                                                                raw = [
                                                                    1.337
                                                                    ], 
                                                                model = , 
                                                                created = , 
                                                                updated = , )
                                                            ], ), 
                                                    edges = openapi_client.models.edges.Edges(
                                                        iterable = [
                                                            openapi_client.models.node.Node(
                                                                id = '', 
                                                                type = 'TAG', 
                                                                root = True, 
                                                                created = , )
                                                            ], ), 
                                                    created = , 
                                                    updated = , ), 
                                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                                    iterable = [
                                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                                            id = '', )
                                                        ], ), ), )
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                mechanism = 'MANUAL', 
                                websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                    iterable = [
                                        openapi_client.models.referenced_website.ReferencedWebsite(
                                            id = '', )
                                        ], 
                                    indices = {
                                        'key' : 56
                                        }, 
                                    score = openapi_client.models.score.Score(
                                        manual = 56, 
                                        automatic = 56, 
                                        priority = 56, 
                                        reuse = 56, 
                                        update = 56, ), ), 
                                interacted = , 
                                tags = openapi_client.models.flattened_tags.FlattenedTags(
                                    iterable = [
                                        openapi_client.models.referenced_tag.ReferencedTag(
                                            id = '', )
                                        ], ), 
                                sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                    iterable = [
                                        openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                            id = '', )
                                        ], ), 
                                persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                    iterable = [
                                        openapi_client.models.referenced_person.ReferencedPerson(
                                            id = '', )
                                        ], ), 
                                curated = True, 
                                discovered = True, 
                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                    iterable = [
                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                            id = '', )
                                        ], ), 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, ), 
                                favorited = True, 
                                pseudo = True, 
                                annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                    iterable = [
                                        openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                            id = '', )
                                        ], ), 
                                hints = openapi_client.models.flattened_hints.FlattenedHints(
                                    iterable = [
                                        openapi_client.models.referenced_hint.ReferencedHint(
                                            id = '', )
                                        ], ), 
                                anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                    iterable = [
                                        openapi_client.models.referenced_anchor.ReferencedAnchor(
                                            id = '', )
                                        ], ), 
                                conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                    iterable = [
                                        openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', )
                                        ], ), ), 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](), 
                            link = '', 
                            access = 'PUBLIC', 
                            accessors = openapi_client.models.accessors.Accessors(
                                iterable = [
                                    openapi_client.models.accessor.Accessor(
                                        id = '', 
                                        os = '', 
                                        share = '', 
                                        count = 56, 
                                        user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                            id = '', 
                                            email = '', 
                                            username = '', 
                                            picture = '', 
                                            vanityname = '', ), )
                                    ], ), 
                            created = , 
                            short = '', 
                            name = '', 
                            distributions = openapi_client.models.distributions.Distributions(
                                iterable = [
                                    openapi_client.models.distribution.Distribution(
                                        id = '', 
                                        share = openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                            id = '', 
                                            link = '', 
                                            access = 'PUBLIC', 
                                            accessors = openapi_client.models.accessors.Accessors(
                                                iterable = [
                                                    openapi_client.models.accessor.Accessor(
                                                        id = '', 
                                                        os = '', 
                                                        share = '', 
                                                        count = 56, )
                                                    ], ), 
                                            created = , 
                                            short = '', ), 
                                        created = , 
                                        updated = , 
                                        mailgun = openapi_client.models.mailgun_distribution.MailgunDistribution(
                                            recipients = openapi_client.models.recipients.Recipients(
                                                iterable = [
                                                    openapi_client.models.person_basic_type.PersonBasicType(
                                                        username = '', 
                                                        picture = '', 
                                                        email = '', 
                                                        sourced = 'TWITTER', 
                                                        url = '', )
                                                    ], ), ), 
                                        github = openapi_client.models.git_hub_distribution.GitHubDistribution(
                                            gist = openapi_client.models.git_hub_gist_distribution.GitHubGistDistribution(
                                                recipients = openapi_client.models.recipients.Recipients(
                                                    iterable = [
                                                        openapi_client.models.person_basic_type.PersonBasicType(
                                                            username = '', 
                                                            picture = '', 
                                                            email = '', 
                                                            url = '', )
                                                        ], ), 
                                                public = True, 
                                                description = '', 
                                                name = '', 
                                                created = , 
                                                updated = , 
                                                github_id = '', 
                                                url = '', ), ), )
                                    ], ), 
                            score = , )
                        ], 
                    score = , ),
                mechanism = 'MANUAL',
                websites = openapi_client.models.websites.Websites(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.website.Website(
                            id = '', 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                indices = {
                                    'key' : 56
                                    }, 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, 
                                    reference = 56, ), ), 
                            url = '', 
                            name = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            mechanisms = {
                                'key' : 'MANUAL'
                                }, 
                            interactions = 56, 
                            persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                iterable = [
                                    openapi_client.models.referenced_person.ReferencedPerson(
                                        id = '', 
                                        reference = openapi_client.models.flattened_person.FlattenedPerson(
                                            id = '', 
                                            created = , 
                                            updated = , 
                                            type = openapi_client.models.person_type.PersonType(
                                                basic = openapi_client.models.person_basic_type.PersonBasicType(
                                                    username = '', 
                                                    name = '', 
                                                    picture = '', 
                                                    email = '', 
                                                    sourced = 'TWITTER', 
                                                    url = '', 
                                                    mailgun = openapi_client.models.mailgun_metadata.MailgunMetadata(
                                                        message_id = '', ), ), 
                                                platform = openapi_client.models.user_profile.UserProfile(
                                                    picture = 'https://picsum.photos/200', 
                                                    email = 'user@pieces.app', 
                                                    username = '', 
                                                    id = '', 
                                                    name = '', 
                                                    aesthetics = openapi_client.models.aesthetics.Aesthetics(
                                                        theme = openapi_client.models.theme.Theme(
                                                            dark = True, ), 
                                                        font = openapi_client.models.font.Font(
                                                            size = 56, ), ), 
                                                    vanityname = '', 
                                                    allocation = openapi_client.models.allocation_cloud.AllocationCloud(
                                                        id = '', 
                                                        user = '', 
                                                        urls = openapi_client.models.allocation_cloud_urls.AllocationCloudUrls(
                                                            base = openapi_client.models.allocation_cloud_url.AllocationCloudUrl(
                                                                status = 'PENDING', 
                                                                url = '', ), 
                                                            id = openapi_client.models.allocation_cloud_url.AllocationCloudUrl(
                                                                status = 'PENDING', 
                                                                url = '', ), 
                                                            vanity = , ), 
                                                        status = openapi_client.models.allocation_cloud_status.AllocationCloudStatus(
                                                            cloud = 'PENDING', ), 
                                                        project = '', 
                                                        version = '', 
                                                        region = '', ), 
                                                    providers = openapi_client.models.external_providers.ExternalProviders(
                                                        iterable = [
                                                            openapi_client.models.external_provider.ExternalProvider(
                                                                type = 'github', 
                                                                user_id = '', 
                                                                access_token = '', 
                                                                expires_in = 56, 
                                                                created = , 
                                                                updated = , 
                                                                profile_data = openapi_client.models.external_provider_profile_data.ExternalProviderProfileData(
                                                                    name = '', 
                                                                    picture = '', 
                                                                    nickname = '', 
                                                                    email = '', 
                                                                    email_verified = True, 
                                                                    node_id = '', 
                                                                    gravatar_id = '', 
                                                                    url = '', 
                                                                    html_url = '', 
                                                                    followers_url = '', 
                                                                    following_url = '', 
                                                                    gists_url = '', 
                                                                    starred_url = '', 
                                                                    subscriptions_url = '', 
                                                                    organizations_url = '', 
                                                                    repos_url = '', 
                                                                    events_url = '', 
                                                                    received_events_url = '', 
                                                                    site_admin = True, 
                                                                    company = '', 
                                                                    blog = '', 
                                                                    anchor = '', 
                                                                    hireable = True, 
                                                                    bio = '', 
                                                                    twitter_username = '', 
                                                                    public_repos = 56, 
                                                                    public_gists = 56, 
                                                                    followers = 56, 
                                                                    following = 56, 
                                                                    created_at = '', 
                                                                    updated_at = '', 
                                                                    private_gists = 56, 
                                                                    total_private_repos = 56, 
                                                                    owned_private_repos = 56, 
                                                                    disk_usage = 56, 
                                                                    collaborators = 56, 
                                                                    two_factor_authentication = True, ), 
                                                                connection = '', 
                                                                is_social = True, )
                                                            ], ), 
                                                    auth0 = openapi_client.models.auth0_user_metadata.Auth0UserMetadata(
                                                        global_id = '', 
                                                        cloud_key = '', 
                                                        stripe_customer_id = '', 
                                                        vanityname = '', ), ), ), 
                                            interactions = 56, 
                                            access = {
                                                'key' : openapi_client.models.person_access.PersonAccess(
                                                    scoped = 'OWNER', )
                                                }, 
                                            tags = openapi_client.models.flattened_tags.FlattenedTags(
                                                iterable = [
                                                    openapi_client.models.referenced_tag.ReferencedTag(
                                                        id = '', )
                                                    ], ), 
                                            models = {
                                                'key' : openapi_client.models.person_model.PersonModel(
                                                    asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                                                    model = openapi_client.models.referenced_model.ReferencedModel(
                                                        id = '', ), 
                                                    explanation = openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                                        id = '', ), )
                                                }, 
                                            annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                                iterable = [
                                                    openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                                        id = '', )
                                                    ], ), ), )
                                    ], ), 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , ),
                interacted = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                tags = openapi_client.models.tags.Tags(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.tag.Tag(
                            id = '', 
                            text = '', 
                            mechanisms = {
                                'key' : 'MANUAL'
                                }, 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                indices = {
                                    'key' : 56
                                    }, 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, 
                                    reference = 56, ), ), 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            category = 'HANDLE', 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = openapi_client.models.model.Model(
                                                id = '', 
                                                version = '', 
                                                created = , 
                                                name = '', 
                                                description = '', 
                                                cloud = True, 
                                                type = 'BALANCED', 
                                                usage = 'OCR', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                quantization = '', 
                                                foundation = 'GPT_3.5', 
                                                downloaded = True, 
                                                loaded = True, 
                                                unique = '', 
                                                parameters = 1.337, 
                                                provider = 'APPLE', 
                                                cpu = True, 
                                                downloading = True, ), 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            interactions = 56, 
                            persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                iterable = [
                                    openapi_client.models.referenced_person.ReferencedPerson(
                                        id = '', 
                                        reference = openapi_client.models.flattened_person.FlattenedPerson(
                                            id = '', 
                                            created = , 
                                            updated = , 
                                            type = openapi_client.models.person_type.PersonType(
                                                basic = openapi_client.models.person_basic_type.PersonBasicType(
                                                    username = '', 
                                                    name = '', 
                                                    picture = '', 
                                                    email = '', 
                                                    sourced = 'TWITTER', 
                                                    url = '', 
                                                    mailgun = openapi_client.models.mailgun_metadata.MailgunMetadata(
                                                        message_id = '', ), ), 
                                                platform = openapi_client.models.user_profile.UserProfile(
                                                    picture = 'https://picsum.photos/200', 
                                                    email = 'user@pieces.app', 
                                                    username = '', 
                                                    id = '', 
                                                    name = '', 
                                                    aesthetics = openapi_client.models.aesthetics.Aesthetics(
                                                        theme = openapi_client.models.theme.Theme(
                                                            dark = True, ), 
                                                        font = openapi_client.models.font.Font(
                                                            size = 56, ), ), 
                                                    vanityname = '', 
                                                    allocation = openapi_client.models.allocation_cloud.AllocationCloud(
                                                        id = '', 
                                                        user = '', 
                                                        urls = openapi_client.models.allocation_cloud_urls.AllocationCloudUrls(
                                                            base = openapi_client.models.allocation_cloud_url.AllocationCloudUrl(
                                                                status = 'PENDING', 
                                                                url = '', ), 
                                                            id = openapi_client.models.allocation_cloud_url.AllocationCloudUrl(
                                                                status = 'PENDING', 
                                                                url = '', ), 
                                                            vanity = , ), 
                                                        status = openapi_client.models.allocation_cloud_status.AllocationCloudStatus(
                                                            cloud = 'PENDING', ), 
                                                        project = '', 
                                                        version = '', 
                                                        region = '', ), 
                                                    providers = openapi_client.models.external_providers.ExternalProviders(
                                                        iterable = [
                                                            openapi_client.models.external_provider.ExternalProvider(
                                                                type = 'github', 
                                                                user_id = '', 
                                                                access_token = '', 
                                                                expires_in = 56, 
                                                                created = , 
                                                                updated = , 
                                                                profile_data = openapi_client.models.external_provider_profile_data.ExternalProviderProfileData(
                                                                    name = '', 
                                                                    picture = '', 
                                                                    nickname = '', 
                                                                    email = '', 
                                                                    email_verified = True, 
                                                                    node_id = '', 
                                                                    gravatar_id = '', 
                                                                    url = '', 
                                                                    html_url = '', 
                                                                    followers_url = '', 
                                                                    following_url = '', 
                                                                    gists_url = '', 
                                                                    starred_url = '', 
                                                                    subscriptions_url = '', 
                                                                    organizations_url = '', 
                                                                    repos_url = '', 
                                                                    events_url = '', 
                                                                    received_events_url = '', 
                                                                    site_admin = True, 
                                                                    company = '', 
                                                                    blog = '', 
                                                                    anchor = '', 
                                                                    hireable = True, 
                                                                    bio = '', 
                                                                    twitter_username = '', 
                                                                    public_repos = 56, 
                                                                    public_gists = 56, 
                                                                    followers = 56, 
                                                                    following = 56, 
                                                                    created_at = '', 
                                                                    updated_at = '', 
                                                                    private_gists = 56, 
                                                                    total_private_repos = 56, 
                                                                    owned_private_repos = 56, 
                                                                    disk_usage = 56, 
                                                                    collaborators = 56, 
                                                                    two_factor_authentication = True, ), 
                                                                connection = '', 
                                                                is_social = True, )
                                                            ], ), 
                                                    auth0 = openapi_client.models.auth0_user_metadata.Auth0UserMetadata(
                                                        global_id = '', 
                                                        cloud_key = '', 
                                                        stripe_customer_id = '', 
                                                        vanityname = '', ), ), ), 
                                            interactions = 56, 
                                            access = {
                                                'key' : openapi_client.models.person_access.PersonAccess(
                                                    scoped = 'OWNER', )
                                                }, 
                                            websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                                iterable = [
                                                    openapi_client.models.referenced_website.ReferencedWebsite(
                                                        id = '', )
                                                    ], ), 
                                            models = {
                                                'key' : openapi_client.models.person_model.PersonModel(
                                                    asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                                                    explanation = openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                                        id = '', ), )
                                                }, 
                                            annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                                iterable = [
                                                    openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                                        id = '', )
                                                    ], ), ), )
                                    ], ), 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , ),
                sensitives = openapi_client.models.sensitives.Sensitives(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.sensitive.Sensitive(
                            id = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                name = '', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = , 
                                updated = , 
                                synced = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                                classification = openapi_client.models.classification.Classification(
                                                    generic = 'CODE', 
                                                    specific = 'csx', 
                                                    rendering = 'HTML', ), 
                                                icon = '', 
                                                role = 'ORIGINAL', 
                                                application = openapi_client.models.application.Application(
                                                    id = '', 
                                                    name = 'SUBLIME', 
                                                    version = '', 
                                                    platform = 'WEB', 
                                                    onboarded = True, 
                                                    privacy = 'OPEN', 
                                                    capabilities = 'LOCAL', 
                                                    mechanism = 'MANUAL', 
                                                    automatic_unload = True, ), 
                                                asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                created = , 
                                                updated = , 
                                                cloud = '', 
                                                fragment = openapi_client.models.fragment_format.FragmentFormat(
                                                    string = openapi_client.models.transferable_string.TransferableString(
                                                        raw = '', 
                                                        base64 = '', 
                                                        base64_url = '', 
                                                        data_url = '', ), 
                                                    metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                        ext = 'csx', ), ), 
                                                file = openapi_client.models.file_format.FileFormat(), 
                                                analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                                    code = openapi_client.models.code_analysis.CodeAnalysis(
                                                        tokenized = [
                                                            ''
                                                            ], 
                                                        language = '', 
                                                        type = 'CODE', 
                                                        prediction = {
                                                            'key' : 1.337
                                                            }, 
                                                        similarity = {
                                                            'key' : 1.337
                                                            }, 
                                                        top5_colors = [
                                                            56
                                                            ], 
                                                        top5_sorted = [
                                                            ''
                                                            ], 
                                                        id = '', 
                                                        analysis = '', 
                                                        model = openapi_client.models.model.Model(
                                                            id = '', 
                                                            version = '', 
                                                            created = , 
                                                            name = '', 
                                                            description = '', 
                                                            cloud = True, 
                                                            type = 'BALANCED', 
                                                            usage = 'OCR', 
                                                            ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                value = 33600, 
                                                                readable = '33.6 KB', ), 
                                                            quantization = '', 
                                                            foundation = 'GPT_3.5', 
                                                            downloaded = True, 
                                                            loaded = True, 
                                                            unique = '', 
                                                            parameters = 1.337, 
                                                            provider = 'APPLE', 
                                                            cpu = True, 
                                                            downloading = True, ), ), 
                                                    id = '', 
                                                    format = '', 
                                                    image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                                        id = '', 
                                                        ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                                            id = '', 
                                                            raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                                            hocr = , 
                                                            model = openapi_client.models.model.Model(
                                                                id = '', 
                                                                version = '', 
                                                                created = , 
                                                                name = '', 
                                                                description = '', 
                                                                cloud = True, 
                                                                type = 'BALANCED', 
                                                                usage = 'OCR', 
                                                                quantization = '', 
                                                                downloaded = True, 
                                                                loaded = True, 
                                                                unique = '', 
                                                                parameters = 1.337, 
                                                                cpu = True, 
                                                                downloading = True, ), 
                                                            image = '', ), 
                                                        analysis = '', ), ), 
                                                relationship = openapi_client.models.relationship.Relationship(
                                                    id = '', 
                                                    embeddings = openapi_client.models.embeddings.Embeddings(
                                                        iterable = [
                                                            openapi_client.models.embedding.Embedding(
                                                                raw = [
                                                                    1.337
                                                                    ], 
                                                                model = , 
                                                                created = , 
                                                                updated = , )
                                                            ], ), 
                                                    edges = openapi_client.models.edges.Edges(
                                                        iterable = [
                                                            openapi_client.models.node.Node(
                                                                id = '', 
                                                                type = 'TAG', 
                                                                root = True, 
                                                                created = , )
                                                            ], ), 
                                                    created = , 
                                                    updated = , ), 
                                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                                    iterable = [
                                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                                            id = '', )
                                                        ], ), ), )
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                    iterable = [
                                        openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                            id = '', 
                                            user = '', 
                                            link = '', 
                                            access = 'PUBLIC', 
                                            accessors = openapi_client.models.accessors.Accessors(
                                                iterable = [
                                                    openapi_client.models.accessor.Accessor(
                                                        id = '', 
                                                        os = '', 
                                                        share = '', 
                                                        count = 56, 
                                                        user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                            id = '', 
                                                            email = '', 
                                                            username = '', 
                                                            picture = '', 
                                                            vanityname = '', ), )
                                                    ], ), 
                                            created = , 
                                            short = '', 
                                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                                indices = {
                                                    'key' : 56
                                                    }, 
                                                score = openapi_client.models.score.Score(
                                                    manual = 56, 
                                                    automatic = 56, 
                                                    priority = 56, 
                                                    reuse = 56, 
                                                    update = 56, ), ), 
                                            distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                iterable = [
                                                    openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                        id = '', )
                                                    ], ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), )
                                        ], 
                                    score = , ), 
                                mechanism = 'MANUAL', 
                                websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                    iterable = [
                                        openapi_client.models.referenced_website.ReferencedWebsite(
                                            id = '', )
                                        ], ), 
                                interacted = , 
                                tags = openapi_client.models.flattened_tags.FlattenedTags(
                                    iterable = [
                                        openapi_client.models.referenced_tag.ReferencedTag(
                                            id = '', )
                                        ], ), 
                                persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                    iterable = [
                                        openapi_client.models.referenced_person.ReferencedPerson(
                                            id = '', )
                                        ], ), 
                                curated = True, 
                                discovered = True, 
                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                    iterable = [
                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                            id = '', )
                                        ], ), 
                                score = , 
                                favorited = True, 
                                pseudo = True, 
                                annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                    iterable = [
                                        openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                            id = '', )
                                        ], ), 
                                hints = openapi_client.models.flattened_hints.FlattenedHints(
                                    iterable = [
                                        openapi_client.models.referenced_hint.ReferencedHint(
                                            id = '', )
                                        ], ), 
                                anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                    iterable = [
                                        openapi_client.models.referenced_anchor.ReferencedAnchor(
                                            id = '', )
                                        ], ), 
                                conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                    iterable = [
                                        openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', )
                                        ], ), ), 
                            text = '', 
                            mechanism = , 
                            category = 'SECRET', 
                            severity = 'LOW', 
                            name = '', 
                            description = '', 
                            metadata = openapi_client.models.sensitive_metadata.SensitiveMetadata(
                                match = openapi_client.models.text_match.TextMatch(
                                    group = openapi_client.models.text_location.TextLocation(
                                        text = '', 
                                        start = 56, 
                                        end = 56, ), 
                                    subgroup = openapi_client.models.text_location.TextLocation(
                                        text = '', 
                                        start = 56, 
                                        end = 56, ), ), 
                                entropy = 1.337, ), 
                            interactions = 56, 
                            score = , )
                        ], 
                    score = , ),
                persons = openapi_client.models.persons.Persons(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.person.Person(
                            id = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            type = openapi_client.models.person_type.PersonType(
                                basic = openapi_client.models.person_basic_type.PersonBasicType(
                                    username = '', 
                                    name = '', 
                                    picture = '', 
                                    email = '', 
                                    sourced = 'TWITTER', 
                                    url = '', 
                                    mailgun = openapi_client.models.mailgun_metadata.MailgunMetadata(
                                        message_id = '', ), ), 
                                platform = openapi_client.models.user_profile.UserProfile(
                                    picture = 'https://picsum.photos/200', 
                                    email = 'user@pieces.app', 
                                    username = '', 
                                    id = '', 
                                    name = '', 
                                    aesthetics = openapi_client.models.aesthetics.Aesthetics(
                                        theme = openapi_client.models.theme.Theme(
                                            dark = True, ), 
                                        font = openapi_client.models.font.Font(
                                            size = 56, ), ), 
                                    vanityname = '', 
                                    allocation = openapi_client.models.allocation_cloud.AllocationCloud(
                                        id = '', 
                                        user = '', 
                                        urls = openapi_client.models.allocation_cloud_urls.AllocationCloudUrls(
                                            base = openapi_client.models.allocation_cloud_url.AllocationCloudUrl(
                                                status = 'PENDING', 
                                                url = '', ), 
                                            id = openapi_client.models.allocation_cloud_url.AllocationCloudUrl(
                                                status = 'PENDING', 
                                                url = '', ), 
                                            vanity = , ), 
                                        status = openapi_client.models.allocation_cloud_status.AllocationCloudStatus(
                                            cloud = 'PENDING', ), 
                                        project = '', 
                                        version = '', 
                                        region = '', ), 
                                    providers = openapi_client.models.external_providers.ExternalProviders(
                                        iterable = [
                                            openapi_client.models.external_provider.ExternalProvider(
                                                type = 'github', 
                                                user_id = '', 
                                                access_token = '', 
                                                expires_in = 56, 
                                                created = , 
                                                updated = , 
                                                profile_data = openapi_client.models.external_provider_profile_data.ExternalProviderProfileData(
                                                    name = '', 
                                                    picture = '', 
                                                    nickname = '', 
                                                    email = '', 
                                                    email_verified = True, 
                                                    node_id = '', 
                                                    gravatar_id = '', 
                                                    url = '', 
                                                    html_url = '', 
                                                    followers_url = '', 
                                                    following_url = '', 
                                                    gists_url = '', 
                                                    starred_url = '', 
                                                    subscriptions_url = '', 
                                                    organizations_url = '', 
                                                    repos_url = '', 
                                                    events_url = '', 
                                                    received_events_url = '', 
                                                    site_admin = True, 
                                                    company = '', 
                                                    blog = '', 
                                                    anchor = '', 
                                                    hireable = True, 
                                                    bio = '', 
                                                    twitter_username = '', 
                                                    public_repos = 56, 
                                                    public_gists = 56, 
                                                    followers = 56, 
                                                    following = 56, 
                                                    created_at = '', 
                                                    updated_at = '', 
                                                    private_gists = 56, 
                                                    total_private_repos = 56, 
                                                    owned_private_repos = 56, 
                                                    disk_usage = 56, 
                                                    collaborators = 56, 
                                                    two_factor_authentication = True, ), 
                                                connection = '', 
                                                is_social = True, )
                                            ], ), 
                                    auth0 = openapi_client.models.auth0_user_metadata.Auth0UserMetadata(
                                        global_id = '', 
                                        cloud_key = '', 
                                        stripe_customer_id = '', 
                                        vanityname = '', ), ), ), 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                indices = {
                                    'key' : 56
                                    }, 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, 
                                    reference = 56, ), ), 
                            mechanisms = {
                                'key' : 'MANUAL'
                                }, 
                            interactions = 56, 
                            access = {
                                'key' : openapi_client.models.person_access.PersonAccess(
                                    scoped = 'OWNER', )
                                }, 
                            tags = openapi_client.models.flattened_tags.FlattenedTags(
                                iterable = [
                                    openapi_client.models.referenced_tag.ReferencedTag(
                                        id = '', 
                                        reference = openapi_client.models.flattened_tag.FlattenedTag(
                                            id = '', 
                                            text = '', 
                                            created = , 
                                            updated = , 
                                            category = 'HANDLE', 
                                            relationship = openapi_client.models.relationship.Relationship(
                                                id = '', 
                                                embeddings = openapi_client.models.embeddings.Embeddings(
                                                    iterable = [
                                                        openapi_client.models.embedding.Embedding(
                                                            raw = [
                                                                1.337
                                                                ], 
                                                            model = openapi_client.models.model.Model(
                                                                id = '', 
                                                                version = '', 
                                                                created = , 
                                                                name = '', 
                                                                description = '', 
                                                                cloud = True, 
                                                                type = 'BALANCED', 
                                                                usage = 'OCR', 
                                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                    value = 33600, 
                                                                    readable = '33.6 KB', ), 
                                                                ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                    value = 33600, 
                                                                    readable = '33.6 KB', ), 
                                                                quantization = '', 
                                                                foundation = 'GPT_3.5', 
                                                                downloaded = True, 
                                                                loaded = True, 
                                                                unique = '', 
                                                                parameters = 1.337, 
                                                                provider = 'APPLE', 
                                                                cpu = True, 
                                                                downloading = True, ), 
                                                            created = , 
                                                            updated = , )
                                                        ], ), 
                                                edges = openapi_client.models.edges.Edges(
                                                    iterable = [
                                                        openapi_client.models.node.Node(
                                                            id = '', 
                                                            type = 'TAG', 
                                                            root = True, 
                                                            created = , )
                                                        ], ), 
                                                created = , 
                                                updated = , ), 
                                            interactions = 56, ), )
                                    ], ), 
                            websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                iterable = [
                                    openapi_client.models.referenced_website.ReferencedWebsite(
                                        id = '', )
                                    ], ), 
                            models = {
                                'key' : openapi_client.models.person_model.PersonModel(
                                    asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                                    explanation = openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                        id = '', ), )
                                }, 
                            annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                iterable = [
                                    openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                        id = '', )
                                    ], ), 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , ),
                curated = True,
                discovered = True,
                activities = openapi_client.models.activities.Activities(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.activity.Activity(
                            id = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            event = openapi_client.models.seeded_connector_tracking.SeededConnectorTracking(
                                format = openapi_client.models.seeded_tracked_format_event.SeededTrackedFormatEvent(
                                    identifier_description_pair = openapi_client.models.tracked_format_event_identifier_description_pairs.TrackedFormatEventIdentifierDescriptionPairs(
                                        format_created = 'a_format_was_created', 
                                        format_copied = 'if_a_format_was_entirely_copied', 
                                        format_partially_copied = 'if_a_format_was_partially_copied', 
                                        format_downloaded = 'if_a_format_was_downloaded', 
                                        format_deleted = 'if_a_format_was_deleted', 
                                        format_generic_classification_updated = 'if_a_generic_classification_was_changed_on_a_format', 
                                        format_specific_classification_updated = 'if_a_specific_classification_was_changed_on_a_format', 
                                        format_updated = 'a_format_was_updated', 
                                        format_inserted = 'a_format_was_inserted', 
                                        format_value_edited = 'a_format_value_was_edited', ), 
                                    format = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                        reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                            classification = openapi_client.models.classification.Classification(
                                                generic = 'CODE', 
                                                specific = 'csx', 
                                                rendering = 'HTML', ), 
                                            icon = '', 
                                            role = 'ORIGINAL', 
                                            application = openapi_client.models.application.Application(
                                                id = '', 
                                                name = 'SUBLIME', 
                                                version = '', 
                                                platform = 'WEB', 
                                                onboarded = True, 
                                                privacy = 'OPEN', 
                                                capabilities = 'LOCAL', 
                                                mechanism = 'MANUAL', 
                                                automatic_unload = True, ), 
                                            asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                            bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                value = 33600, 
                                                readable = '33.6 KB', ), 
                                            created = , 
                                            updated = , 
                                            deleted = , 
                                            synced = , 
                                            cloud = '', 
                                            fragment = openapi_client.models.fragment_format.FragmentFormat(
                                                string = openapi_client.models.transferable_string.TransferableString(
                                                    raw = '', 
                                                    base64 = '', 
                                                    base64_url = '', 
                                                    data_url = '', ), 
                                                metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                    ext = 'csx', ), ), 
                                            file = openapi_client.models.file_format.FileFormat(), 
                                            analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                                code = openapi_client.models.code_analysis.CodeAnalysis(
                                                    tokenized = [
                                                        ''
                                                        ], 
                                                    language = '', 
                                                    type = 'CODE', 
                                                    prediction = {
                                                        'key' : 1.337
                                                        }, 
                                                    similarity = {
                                                        'key' : 1.337
                                                        }, 
                                                    top5_colors = [
                                                        56
                                                        ], 
                                                    top5_sorted = [
                                                        ''
                                                        ], 
                                                    id = '', 
                                                    analysis = '', 
                                                    model = openapi_client.models.model.Model(
                                                        id = '', 
                                                        version = '', 
                                                        created = , 
                                                        name = '', 
                                                        description = '', 
                                                        cloud = True, 
                                                        type = 'BALANCED', 
                                                        usage = 'OCR', 
                                                        ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                            value = 33600, 
                                                            readable = '33.6 KB', ), 
                                                        quantization = '', 
                                                        foundation = 'GPT_3.5', 
                                                        downloaded = True, 
                                                        loaded = True, 
                                                        unique = '', 
                                                        parameters = 1.337, 
                                                        provider = 'APPLE', 
                                                        cpu = True, 
                                                        downloading = True, ), ), 
                                                id = '', 
                                                format = '', 
                                                image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                                    id = '', 
                                                    ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                                        id = '', 
                                                        raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                                        hocr = , 
                                                        model = openapi_client.models.model.Model(
                                                            id = '', 
                                                            version = '', 
                                                            created = , 
                                                            name = '', 
                                                            description = '', 
                                                            cloud = True, 
                                                            type = 'BALANCED', 
                                                            usage = 'OCR', 
                                                            quantization = '', 
                                                            downloaded = True, 
                                                            loaded = True, 
                                                            unique = '', 
                                                            parameters = 1.337, 
                                                            cpu = True, 
                                                            downloading = True, ), 
                                                        image = '', ), 
                                                    analysis = '', ), ), 
                                            relationship = openapi_client.models.relationship.Relationship(
                                                id = '', 
                                                embeddings = openapi_client.models.embeddings.Embeddings(
                                                    iterable = [
                                                        openapi_client.models.embedding.Embedding(
                                                            raw = [
                                                                1.337
                                                                ], 
                                                            model = , 
                                                            created = , 
                                                            updated = , )
                                                        ], ), 
                                                edges = openapi_client.models.edges.Edges(
                                                    iterable = [
                                                        openapi_client.models.node.Node(
                                                            id = '', 
                                                            type = 'TAG', 
                                                            root = True, 
                                                            created = , )
                                                        ], ), 
                                                created = , 
                                                updated = , ), ), ), 
                                    metadata = openapi_client.models.tracked_format_event_metadata.TrackedFormatEventMetadata(
                                        reclassification = openapi_client.models.tracked_asset_event_format_reclassification_metadata.TrackedAssetEventFormatReclassificationMetadata(
                                            previous = openapi_client.models.classification.Classification(
                                                generic = 'CODE', 
                                                specific = 'csx', ), 
                                            current = , ), ), ), 
                                asset = openapi_client.models.seeded_tracked_asset_event.SeededTrackedAssetEvent(
                                    asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                        id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                                    identifier_description_pair = openapi_client.models.tracked_asset_event_identifier_description_pairs.TrackedAssetEventIdentifierDescriptionPairs(
                                        asset_created = 'an_asset_was_created', 
                                        asset_viewed = 'an_asset_was_viewed', 
                                        asset_format_copied = 'an_asset_preview_format_was_copied', 
                                        asset_format_downloaded = 'an_asset_format_was_downloaded', 
                                        asset_deleted = 'an_asset_was_deleted', 
                                        asset_description_updated = 'an_asset_was_redescribed_by_the_user', 
                                        asset_name_updated = 'an_asset_was_renamed_by_the_user', 
                                        asset_format_generic_classification_updated = 'a_generic_classification_was_changed_on_a_format_within_an_asset', 
                                        asset_format_specific_classification_updated = 'a_specific_classification_was_changed_on_a_format_within_an_asset', 
                                        asset_creation_failed = 'an_asset_failed_to_be_created', 
                                        asset_tag_added = 'a_tag_was_added_by_the_user', 
                                        asset_link_added = 'a_link_was_added_by_the_user', 
                                        asset_link_generated = 'an_asset_link_was_generated', 
                                        asset_link_deleted = 'a_link_was_deleted_by_the_user', 
                                        asset_tag_deleted = 'a_tag_was_deleted_by_the_user', 
                                        asset_updated = 'an_asset_was_updated', 
                                        asset_format_value_edited = 'a_specific_format_value_was_edited_on_an_asset', 
                                        asset_format_updated = 'a_specific_format_was_updated_on_an_asset', 
                                        asset_link_revoked = 'an_asset_link_was_revoked', 
                                        asset_person_added = 'a_person_was_added_by_the_user', 
                                        asset_person_deleted = 'a_person_was_deleted_by_the_user', 
                                        asset_sensitive_added = 'a_sensitive_was_added_by_the_user', 
                                        asset_sensitive_deleted = 'a_sensitive_was_deleted_by_the_user', 
                                        suggested_asset_referenced = 'a_suggested_asset_was_referenced_by_the_user', 
                                        searched_asset_referenced = 'a_searched_asset_was_referenced_by_the_user', 
                                        asset_referenced = 'an_asset_was_referenced_by_the_user', 
                                        activity_asset_referenced = 'an_activity_asset_was_referenced_by_the_user', 
                                        asset_annotation_added = 'an_annotation_was_added_by_the_user', 
                                        asset_annotation_deleted = 'an_annotation_was_deleted_by_the_user', 
                                        asset_annotation_updated = 'an_annotation_was_updated_by_the_user', 
                                        asset_hint_added = 'a_hint_was_added_by_the_user', 
                                        asset_hint_deleted = 'a_hint_was_deleted_by_the_user', 
                                        asset_hint_updated = 'a_hint_was_updated_by_the_user', 
                                        asset_anchor_added = 'a_anchor_was_added_by_the_user', 
                                        asset_anchor_deleted = 'a_anchor_was_deleted_by_the_user', 
                                        asset_anchor_updated = 'a_anchor_was_updated_by_the_user', ), ), 
                                interaction = openapi_client.models.seeded_tracked_interaction_event.SeededTrackedInteractionEvent(
                                    description = '', 
                                    element = '', ), 
                                keyboard = openapi_client.models.seeded_tracked_keyboard_event.SeededTrackedKeyboardEvent(
                                    description = '', 
                                    shortcut = [
                                        56
                                        ], ), 
                                session = openapi_client.models.seeded_tracked_session_event.SeededTrackedSessionEvent(
                                    identifier_description_pair = openapi_client.models.tracked_session_event_identifier_description_pairs.TrackedSessionEventIdentifierDescriptionPairs(
                                        session_initialized = 'a_session_has_been_initialized_and_the_application_has_been_opened', 
                                        session_local_connection_succeeded = 'one_or_more_applications_has_successfully_connected', 
                                        session_local_connection_failed = 'one_or_more_applications_has_failed_to_connect_locally', 
                                        session_inactive = 'a_session_is_inactive_because_the_application_is_not_in_the_foreground', 
                                        session_active = 'a_session_is_active_because_the_application_is_in_the_foreground', 
                                        session_terminated = 'a_session_has_been_ended_and_the_application_has_been_closed', 
                                        session_authenticated_with_sign_in = 'a_user_has_signed_into_this_session_with_a_an_external_account', 
                                        session_unauthenticated_with_sign_out = 'a_user_has_signed_out_of_this_session', 
                                        session_unauthenticated_with_dismiss = 'a_user_did_not_sign_into_the_session_with_a_dismissal', 
                                        session_unauthenticated_with_remind = 'a_user_did_not_sign_into_the_session_with_a_reminder', 
                                        session_onboarding_initialized = 'onboarding_has_been_initialized_for_this_session', 
                                        session_onboarding_completed = 'onboarding_has_been_completed_for_this_session', ), ), 
                                assets = openapi_client.models.seeded_tracked_assets_event.SeededTrackedAssetsEvent(), 
                                ml = openapi_client.models.seeded_tracked_machine_learning_event.SeededTrackedMachineLearningEvent(
                                    tlp = openapi_client.models.tlp_machine_learning_processing_event.TLPMachineLearningProcessingEvent(), 
                                    graphical = openapi_client.models.graphical_machine_learning_processing_event.GraphicalMachineLearningProcessingEvent(
                                        svg = openapi_client.models.graphical_svg_statistics.GraphicalSVGStatistics(
                                            id = '', ), ), ), 
                                adoption = openapi_client.models.seeded_tracked_adoption_event.SeededTrackedAdoptionEvent(), ), 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                automatic_unload = True, ), 
                            deleted = , 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = , 
                                updated = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                    iterable = [
                                        openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                            id = '', 
                                            user = '', 
                                            link = '', 
                                            access = 'PUBLIC', 
                                            accessors = openapi_client.models.accessors.Accessors(
                                                iterable = [
                                                    openapi_client.models.accessor.Accessor(
                                                        id = '', 
                                                        os = '', 
                                                        share = '', 
                                                        count = 56, 
                                                        user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                            id = '', 
                                                            email = '', 
                                                            username = '', 
                                                            picture = '', 
                                                            vanityname = '', ), )
                                                    ], ), 
                                            created = , 
                                            short = '', 
                                            distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                iterable = [
                                                    openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                        id = '', )
                                                    ], ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), )
                                        ], 
                                    score = openapi_client.models.score.Score(
                                        manual = 56, 
                                        automatic = 56, 
                                        priority = 56, 
                                        reuse = 56, 
                                        update = 56, ), ), 
                                mechanism = 'MANUAL', 
                                websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                    iterable = [
                                        openapi_client.models.referenced_website.ReferencedWebsite(
                                            id = '', )
                                        ], 
                                    indices = {
                                        'key' : 56
                                        }, ), 
                                interacted = , 
                                tags = openapi_client.models.flattened_tags.FlattenedTags(
                                    iterable = [
                                        openapi_client.models.referenced_tag.ReferencedTag(
                                            id = '', )
                                        ], ), 
                                sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                    iterable = [
                                        openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                            id = '', )
                                        ], ), 
                                persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                    iterable = [
                                        openapi_client.models.referenced_person.ReferencedPerson(
                                            id = '', )
                                        ], ), 
                                curated = True, 
                                discovered = True, 
                                score = , 
                                favorited = True, 
                                pseudo = True, 
                                annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                    iterable = [
                                        openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                            id = '', )
                                        ], ), 
                                hints = openapi_client.models.flattened_hints.FlattenedHints(
                                    iterable = [
                                        openapi_client.models.referenced_hint.ReferencedHint(
                                            id = '', )
                                        ], ), 
                                anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                    iterable = [
                                        openapi_client.models.referenced_anchor.ReferencedAnchor(
                                            id = '', )
                                        ], ), 
                                conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                    iterable = [
                                        openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', )
                                        ], ), ), 
                            user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                id = '', 
                                email = '', 
                                username = '', 
                                picture = '', 
                                vanityname = '', ), 
                            format = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                classification = , 
                                icon = '', 
                                role = 'ORIGINAL', 
                                application = , 
                                asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                bytes = , 
                                created = , 
                                updated = , 
                                cloud = '', ), 
                            mechanism = , 
                            rank = 56, )
                        ], ),
                score = openapi_client.models.score.Score(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    manual = 56, 
                    automatic = 56, 
                    priority = 56, 
                    reuse = 56, 
                    update = 56, 
                    reference = 56, ),
                favorited = True,
                pseudo = True,
                annotations = openapi_client.models.annotations.Annotations(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.annotation.Annotation(
                            id = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            mechanism = 'MANUAL', 
                            asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                reference = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                    id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                    name = '', 
                                    creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                    created = , 
                                    updated = , 
                                    synced = , 
                                    formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                        iterable = [
                                            openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', )
                                            ], ), 
                                    preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                        base = '', 
                                        overlay = '', ), 
                                    original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                    shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                        iterable = [
                                            openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                                id = '', 
                                                user = '', 
                                                link = '', 
                                                access = 'PUBLIC', 
                                                accessors = openapi_client.models.accessors.Accessors(
                                                    iterable = [
                                                        openapi_client.models.accessor.Accessor(
                                                            id = '', 
                                                            os = '', 
                                                            share = '', 
                                                            count = 56, 
                                                            user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                                id = '', 
                                                                email = '', 
                                                                name = '', 
                                                                username = '', 
                                                                picture = '', 
                                                                vanityname = '', ), )
                                                        ], ), 
                                                created = , 
                                                short = '', 
                                                name = '', 
                                                assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                                    indices = {
                                                        'key' : 56
                                                        }, 
                                                    score = openapi_client.models.score.Score(
                                                        manual = 56, 
                                                        automatic = 56, 
                                                        priority = 56, 
                                                        reuse = 56, 
                                                        update = 56, ), ), 
                                                distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                    iterable = [
                                                        openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                            id = '', )
                                                        ], ), 
                                                score = openapi_client.models.score.Score(
                                                    manual = 56, 
                                                    automatic = 56, 
                                                    priority = 56, 
                                                    reuse = 56, 
                                                    update = 56, ), )
                                            ], 
                                        score = , ), 
                                    mechanism = 'MANUAL', 
                                    websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                        iterable = [
                                            openapi_client.models.referenced_website.ReferencedWebsite(
                                                id = '', )
                                            ], ), 
                                    interacted = , 
                                    tags = openapi_client.models.flattened_tags.FlattenedTags(
                                        iterable = [
                                            openapi_client.models.referenced_tag.ReferencedTag(
                                                id = '', )
                                            ], ), 
                                    sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                        iterable = [
                                            openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                                id = '', )
                                            ], ), 
                                    persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                        iterable = [
                                            openapi_client.models.referenced_person.ReferencedPerson(
                                                id = '', )
                                            ], ), 
                                    curated = True, 
                                    discovered = True, 
                                    activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                        iterable = [
                                            openapi_client.models.referenced_activity.ReferencedActivity(
                                                id = '', )
                                            ], ), 
                                    score = , 
                                    favorited = True, 
                                    pseudo = True, 
                                    hints = openapi_client.models.flattened_hints.FlattenedHints(
                                        iterable = [
                                            openapi_client.models.referenced_hint.ReferencedHint(
                                                id = '', )
                                            ], ), 
                                    anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                        iterable = [
                                            openapi_client.models.referenced_anchor.ReferencedAnchor(
                                                id = '', )
                                            ], ), 
                                    conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                        iterable = [
                                            openapi_client.models.referenced_conversation.ReferencedConversation(
                                                id = '', )
                                            ], ), ), ), 
                            person = openapi_client.models.referenced_person.ReferencedPerson(
                                id = '', ), 
                            type = 'DESCRIPTION', 
                            text = '', 
                            model = openapi_client.models.referenced_model.ReferencedModel(
                                id = '', ), 
                            pseudo = True, 
                            favorited = True, 
                            anchor = openapi_client.models.referenced_anchor.ReferencedAnchor(
                                id = '', ), 
                            conversation = openapi_client.models.referenced_conversation.ReferencedConversation(
                                id = '', ), 
                            score = , 
                            messages = openapi_client.models.flattened_conversation_messages.FlattenedConversationMessages(
                                iterable = [
                                    openapi_client.models.referenced_conversation_message.ReferencedConversationMessage(
                                        id = '', )
                                    ], ), )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , ),
                hints = openapi_client.models.hints.Hints(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.hint.Hint(
                            id = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            mechanism = 'MANUAL', 
                            asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                reference = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                    id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                    name = '', 
                                    creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                    created = , 
                                    updated = , 
                                    synced = , 
                                    formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                        iterable = [
                                            openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', )
                                            ], ), 
                                    preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                        base = '', 
                                        overlay = '', ), 
                                    original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                    shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                        iterable = [
                                            openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                                id = '', 
                                                user = '', 
                                                link = '', 
                                                access = 'PUBLIC', 
                                                accessors = openapi_client.models.accessors.Accessors(
                                                    iterable = [
                                                        openapi_client.models.accessor.Accessor(
                                                            id = '', 
                                                            os = '', 
                                                            share = '', 
                                                            count = 56, 
                                                            user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                                id = '', 
                                                                email = '', 
                                                                name = '', 
                                                                username = '', 
                                                                picture = '', 
                                                                vanityname = '', ), )
                                                        ], ), 
                                                created = , 
                                                short = '', 
                                                name = '', 
                                                assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                                    indices = {
                                                        'key' : 56
                                                        }, 
                                                    score = openapi_client.models.score.Score(
                                                        manual = 56, 
                                                        automatic = 56, 
                                                        priority = 56, 
                                                        reuse = 56, 
                                                        update = 56, ), ), 
                                                distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                    iterable = [
                                                        openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                            id = '', )
                                                        ], ), 
                                                score = openapi_client.models.score.Score(
                                                    manual = 56, 
                                                    automatic = 56, 
                                                    priority = 56, 
                                                    reuse = 56, 
                                                    update = 56, ), )
                                            ], 
                                        score = , ), 
                                    mechanism = 'MANUAL', 
                                    websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                        iterable = [
                                            openapi_client.models.referenced_website.ReferencedWebsite(
                                                id = '', )
                                            ], ), 
                                    interacted = , 
                                    tags = openapi_client.models.flattened_tags.FlattenedTags(
                                        iterable = [
                                            openapi_client.models.referenced_tag.ReferencedTag(
                                                id = '', )
                                            ], ), 
                                    sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                        iterable = [
                                            openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                                id = '', )
                                            ], ), 
                                    persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                        iterable = [
                                            openapi_client.models.referenced_person.ReferencedPerson(
                                                id = '', )
                                            ], ), 
                                    curated = True, 
                                    discovered = True, 
                                    activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                        iterable = [
                                            openapi_client.models.referenced_activity.ReferencedActivity(
                                                id = '', )
                                            ], ), 
                                    score = , 
                                    favorited = True, 
                                    pseudo = True, 
                                    annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                        iterable = [
                                            openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                                id = '', )
                                            ], ), 
                                    anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                        iterable = [
                                            openapi_client.models.referenced_anchor.ReferencedAnchor(
                                                id = '', )
                                            ], ), 
                                    conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                        iterable = [
                                            openapi_client.models.referenced_conversation.ReferencedConversation(
                                                id = '', )
                                            ], ), ), ), 
                            type = 'SUGGESTED_QUERY', 
                            text = '', 
                            model = openapi_client.models.referenced_model.ReferencedModel(
                                id = '', ), 
                            score = , )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , ),
                anchors = openapi_client.models.anchors.Anchors(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.anchor.Anchor(
                            id = '', 
                            name = '', 
                            type = 'FILE', 
                            watch = True, 
                            points = openapi_client.models.flattened_anchor_points.FlattenedAnchorPoints(
                                iterable = [
                                    openapi_client.models.referenced_anchor_point.ReferencedAnchorPoint(
                                        id = '', 
                                        reference = openapi_client.models.flattened_anchor_point.FlattenedAnchorPoint(
                                            id = '', 
                                            verified = True, 
                                            fullpath = '', 
                                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                            deleted = , 
                                            platform = 'WEB', 
                                            anchor = openapi_client.models.referenced_anchor.ReferencedAnchor(
                                                id = '', ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), ), )
                                    ], 
                                indices = {
                                    'key' : 56
                                    }, 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, ), ), 
                            created = , 
                            updated = , 
                            deleted = , 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](), 
                            annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                iterable = [
                                    openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                        id = '', )
                                    ], ), 
                            conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                iterable = [
                                    openapi_client.models.referenced_conversation.ReferencedConversation(
                                        id = '', )
                                    ], ), 
                            score = , )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , ),
                conversations = openapi_client.models.conversations.Conversations(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.conversation.Conversation(
                            id = '', 
                            name = '', 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            favorited = True, 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                capabilities = 'LOCAL', 
                                mechanism = 'MANUAL', 
                                automatic_unload = True, ), 
                            annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                iterable = [
                                    openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                        id = '', 
                                        reference = openapi_client.models.flattened_annotation.FlattenedAnnotation(
                                            id = '', 
                                            created = , 
                                            updated = , 
                                            asset = openapi_client.models.referenced_asset_[dag_safety].ReferencedAsset [DAG Safety](
                                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', ), 
                                            person = openapi_client.models.referenced_person.ReferencedPerson(
                                                id = '', ), 
                                            type = 'DESCRIPTION', 
                                            text = '', 
                                            model = openapi_client.models.referenced_model.ReferencedModel(
                                                id = '', ), 
                                            pseudo = True, 
                                            favorited = True, 
                                            anchor = openapi_client.models.referenced_anchor.ReferencedAnchor(
                                                id = '', ), 
                                            conversation = openapi_client.models.referenced_conversation.ReferencedConversation(
                                                id = '', ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), 
                                            messages = openapi_client.models.flattened_conversation_messages.FlattenedConversationMessages(
                                                iterable = [
                                                    openapi_client.models.referenced_conversation_message.ReferencedConversationMessage(
                                                        id = '', )
                                                    ], 
                                                indices = {
                                                    'key' : 56
                                                    }, ), ), )
                                    ], 
                                indices = {
                                    'key' : 56
                                    }, 
                                score = openapi_client.models.score.Score(
                                    manual = 56, 
                                    automatic = 56, 
                                    priority = 56, 
                                    reuse = 56, 
                                    update = 56, ), ), 
                            messages = openapi_client.models.flattened_conversation_messages.FlattenedConversationMessages(
                                iterable = [
                                    openapi_client.models.referenced_conversation_message.ReferencedConversationMessage(
                                        id = '', )
                                    ], ), 
                            model = openapi_client.models.referenced_model.ReferencedModel(
                                id = '', ), 
                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](), 
                            anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                iterable = [
                                    openapi_client.models.referenced_anchor.ReferencedAnchor(
                                        id = '', )
                                    ], ), 
                            type = 'COPILOT', 
                            grounding = openapi_client.models.conversation_grounding.ConversationGrounding(), 
                            score = , )
                        ], 
                    indices = {
                        'key' : 56
                        }, 
                    score = , )
            )
        else:
            return Asset(
                id = '2254f2c8-5797-40e8-ac56-41166dc0e159',
                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08',
                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                formats = openapi_client.models.formats.Formats(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    iterable = [
                        openapi_client.models.format.Format(
                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                            classification = openapi_client.models.classification.Classification(
                                generic = 'CODE', 
                                specific = 'csx', 
                                rendering = 'HTML', ), 
                            icon = '', 
                            role = 'ORIGINAL', 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                capabilities = 'LOCAL', 
                                mechanism = 'MANUAL', 
                                automatic_unload = True, ), 
                            asset = openapi_client.models.flattened_asset_[dag_safety].FlattenedAsset [DAG Safety](
                                id = '2254f2c8-5797-40e8-ac56-41166dc0e159', 
                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                synced = , 
                                deleted = , 
                                formats = openapi_client.models.flattened_formats.FlattenedFormats(
                                    iterable = [
                                        openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                                creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                                classification = openapi_client.models.classification.Classification(
                                                    generic = 'CODE', 
                                                    specific = 'csx', ), 
                                                icon = '', 
                                                role = 'ORIGINAL', 
                                                application = openapi_client.models.application.Application(
                                                    id = '', 
                                                    name = 'SUBLIME', 
                                                    version = '', 
                                                    platform = 'WEB', 
                                                    onboarded = True, 
                                                    privacy = 'OPEN', 
                                                    automatic_unload = True, ), 
                                                asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                                bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                    value = 33600, 
                                                    readable = '33.6 KB', ), 
                                                created = , 
                                                updated = , 
                                                cloud = '', 
                                                fragment = openapi_client.models.fragment_format.FragmentFormat(
                                                    string = openapi_client.models.transferable_string.TransferableString(
                                                        raw = '', 
                                                        base64 = '', 
                                                        base64_url = '', 
                                                        data_url = '', ), 
                                                    metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                        ext = 'csx', ), ), 
                                                file = openapi_client.models.file_format.FileFormat(), 
                                                analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                                    code = openapi_client.models.code_analysis.CodeAnalysis(
                                                        tokenized = [
                                                            ''
                                                            ], 
                                                        language = '', 
                                                        type = 'CODE', 
                                                        prediction = {
                                                            'key' : 1.337
                                                            }, 
                                                        similarity = {
                                                            'key' : 1.337
                                                            }, 
                                                        top5_colors = [
                                                            56
                                                            ], 
                                                        top5_sorted = [
                                                            ''
                                                            ], 
                                                        id = '', 
                                                        analysis = '', 
                                                        model = openapi_client.models.model.Model(
                                                            id = '', 
                                                            version = '', 
                                                            created = , 
                                                            name = '', 
                                                            description = '', 
                                                            cloud = True, 
                                                            type = 'BALANCED', 
                                                            usage = 'OCR', 
                                                            ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                                value = 33600, 
                                                                readable = '33.6 KB', ), 
                                                            quantization = '', 
                                                            foundation = 'GPT_3.5', 
                                                            downloaded = True, 
                                                            loaded = True, 
                                                            unique = '', 
                                                            parameters = 1.337, 
                                                            provider = 'APPLE', 
                                                            cpu = True, 
                                                            downloading = True, ), ), 
                                                    id = '', 
                                                    format = '', 
                                                    image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                                        id = '', 
                                                        ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                                            id = '', 
                                                            raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                                                id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                                            hocr = , 
                                                            model = openapi_client.models.model.Model(
                                                                id = '', 
                                                                version = '', 
                                                                created = , 
                                                                name = '', 
                                                                description = '', 
                                                                cloud = True, 
                                                                type = 'BALANCED', 
                                                                usage = 'OCR', 
                                                                quantization = '', 
                                                                downloaded = True, 
                                                                loaded = True, 
                                                                unique = '', 
                                                                parameters = 1.337, 
                                                                cpu = True, 
                                                                downloading = True, ), 
                                                            image = '', ), 
                                                        analysis = '', ), ), 
                                                relationship = openapi_client.models.relationship.Relationship(
                                                    id = '', 
                                                    embeddings = openapi_client.models.embeddings.Embeddings(
                                                        iterable = [
                                                            openapi_client.models.embedding.Embedding(
                                                                raw = [
                                                                    1.337
                                                                    ], 
                                                                model = , 
                                                                created = , 
                                                                updated = , )
                                                            ], ), 
                                                    edges = openapi_client.models.edges.Edges(
                                                        iterable = [
                                                            openapi_client.models.node.Node(
                                                                id = '', 
                                                                type = 'TAG', 
                                                                root = True, 
                                                                created = , )
                                                            ], ), 
                                                    created = , 
                                                    updated = , ), 
                                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                                    iterable = [
                                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                                            id = '', )
                                                        ], ), ), )
                                        ], ), 
                                preview = openapi_client.models.flattened_preview.FlattenedPreview(
                                    base = '', 
                                    overlay = '', ), 
                                original = '0872ccbf-1d8f-4f46-9028-469794d72761', 
                                shares = openapi_client.models.flattened_shares_[dag_safe].FlattenedShares [DAG Safe](
                                    iterable = [
                                        openapi_client.models.flattened_share_[dag_safe].FlattenedShare [DAG SAFE](
                                            id = '', 
                                            user = '', 
                                            link = '', 
                                            access = 'PUBLIC', 
                                            accessors = openapi_client.models.accessors.Accessors(
                                                iterable = [
                                                    openapi_client.models.accessor.Accessor(
                                                        id = '', 
                                                        os = '', 
                                                        share = '', 
                                                        count = 56, 
                                                        user = openapi_client.models.flattened_user_profile.FlattenedUserProfile(
                                                            id = '', 
                                                            email = '', 
                                                            username = '', 
                                                            picture = '', 
                                                            vanityname = '', ), )
                                                    ], ), 
                                            created = , 
                                            short = '', 
                                            assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](
                                                indices = {
                                                    'key' : 56
                                                    }, 
                                                score = openapi_client.models.score.Score(
                                                    manual = 56, 
                                                    automatic = 56, 
                                                    priority = 56, 
                                                    reuse = 56, 
                                                    update = 56, ), ), 
                                            distributions = openapi_client.models.flattened_distributions.FlattenedDistributions(
                                                iterable = [
                                                    openapi_client.models.referenced_distribution.ReferencedDistribution(
                                                        id = '', )
                                                    ], ), 
                                            score = openapi_client.models.score.Score(
                                                manual = 56, 
                                                automatic = 56, 
                                                priority = 56, 
                                                reuse = 56, 
                                                update = 56, ), )
                                        ], 
                                    score = , ), 
                                mechanism = 'MANUAL', 
                                websites = openapi_client.models.flattened_websites.FlattenedWebsites(
                                    iterable = [
                                        openapi_client.models.referenced_website.ReferencedWebsite(
                                            id = '', )
                                        ], ), 
                                interacted = , 
                                tags = openapi_client.models.flattened_tags.FlattenedTags(
                                    iterable = [
                                        openapi_client.models.referenced_tag.ReferencedTag(
                                            id = '', )
                                        ], ), 
                                sensitives = openapi_client.models.flattened_sensitives.FlattenedSensitives(
                                    iterable = [
                                        openapi_client.models.referenced_sensitive.ReferencedSensitive(
                                            id = '', )
                                        ], ), 
                                persons = openapi_client.models.flattened_persons.FlattenedPersons(
                                    iterable = [
                                        openapi_client.models.referenced_person.ReferencedPerson(
                                            id = '', )
                                        ], ), 
                                curated = True, 
                                discovered = True, 
                                activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                    iterable = [
                                        openapi_client.models.referenced_activity.ReferencedActivity(
                                            id = '', )
                                        ], ), 
                                score = , 
                                favorited = True, 
                                pseudo = True, 
                                annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                    iterable = [
                                        openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                            id = '', )
                                        ], ), 
                                hints = openapi_client.models.flattened_hints.FlattenedHints(
                                    iterable = [
                                        openapi_client.models.referenced_hint.ReferencedHint(
                                            id = '', )
                                        ], ), 
                                anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                                    iterable = [
                                        openapi_client.models.referenced_anchor.ReferencedAnchor(
                                            id = '', )
                                        ], ), 
                                conversations = openapi_client.models.flattened_conversations.FlattenedConversations(
                                    iterable = [
                                        openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', )
                                        ], ), ), 
                            bytes = , 
                            created = , 
                            updated = , 
                            deleted = , 
                            synced = , 
                            cloud = '', 
                            fragment = openapi_client.models.fragment_format.FragmentFormat(), 
                            file = openapi_client.models.file_format.FileFormat(), 
                            analysis = openapi_client.models.analysis.Analysis(
                                id = '', 
                                format = '', ), 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = , 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            activities = openapi_client.models.activities.Activities(
                                iterable = [
                                    openapi_client.models.activity.Activity(
                                        id = '', 
                                        created = , 
                                        updated = , 
                                        event = openapi_client.models.seeded_connector_tracking.SeededConnectorTracking(
                                            format = openapi_client.models.seeded_tracked_format_event.SeededTrackedFormatEvent(
                                                identifier_description_pair = openapi_client.models.tracked_format_event_identifier_description_pairs.TrackedFormatEventIdentifierDescriptionPairs(
                                                    format_created = 'a_format_was_created', 
                                                    format_copied = 'if_a_format_was_entirely_copied', 
                                                    format_partially_copied = 'if_a_format_was_partially_copied', 
                                                    format_downloaded = 'if_a_format_was_downloaded', 
                                                    format_deleted = 'if_a_format_was_deleted', 
                                                    format_generic_classification_updated = 'if_a_generic_classification_was_changed_on_a_format', 
                                                    format_specific_classification_updated = 'if_a_specific_classification_was_changed_on_a_format', 
                                                    format_updated = 'a_format_was_updated', 
                                                    format_inserted = 'a_format_was_inserted', 
                                                    format_value_edited = 'a_format_value_was_edited', ), 
                                                format = , ), 
                                            interaction = openapi_client.models.seeded_tracked_interaction_event.SeededTrackedInteractionEvent(
                                                description = '', 
                                                element = '', ), 
                                            keyboard = openapi_client.models.seeded_tracked_keyboard_event.SeededTrackedKeyboardEvent(
                                                description = '', 
                                                shortcut = [
                                                    56
                                                    ], ), 
                                            session = openapi_client.models.seeded_tracked_session_event.SeededTrackedSessionEvent(
                                                identifier_description_pair = openapi_client.models.tracked_session_event_identifier_description_pairs.TrackedSessionEventIdentifierDescriptionPairs(
                                                    session_initialized = 'a_session_has_been_initialized_and_the_application_has_been_opened', 
                                                    session_local_connection_succeeded = 'one_or_more_applications_has_successfully_connected', 
                                                    session_local_connection_failed = 'one_or_more_applications_has_failed_to_connect_locally', 
                                                    session_inactive = 'a_session_is_inactive_because_the_application_is_not_in_the_foreground', 
                                                    session_active = 'a_session_is_active_because_the_application_is_in_the_foreground', 
                                                    session_terminated = 'a_session_has_been_ended_and_the_application_has_been_closed', 
                                                    session_authenticated_with_sign_in = 'a_user_has_signed_into_this_session_with_a_an_external_account', 
                                                    session_unauthenticated_with_sign_out = 'a_user_has_signed_out_of_this_session', 
                                                    session_unauthenticated_with_dismiss = 'a_user_did_not_sign_into_the_session_with_a_dismissal', 
                                                    session_unauthenticated_with_remind = 'a_user_did_not_sign_into_the_session_with_a_reminder', 
                                                    session_onboarding_initialized = 'onboarding_has_been_initialized_for_this_session', 
                                                    session_onboarding_completed = 'onboarding_has_been_completed_for_this_session', ), ), 
                                            ml = openapi_client.models.seeded_tracked_machine_learning_event.SeededTrackedMachineLearningEvent(
                                                tlp = openapi_client.models.tlp_machine_learning_processing_event.TLPMachineLearningProcessingEvent(), 
                                                graphical = openapi_client.models.graphical_machine_learning_processing_event.GraphicalMachineLearningProcessingEvent(
                                                    svg = openapi_client.models.graphical_svg_statistics.GraphicalSVGStatistics(
                                                        id = '', ), ), ), 
                                            adoption = openapi_client.models.seeded_tracked_adoption_event.SeededTrackedAdoptionEvent(), ), 
                                        application = , 
                                        format = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                                            classification = , 
                                            icon = '', 
                                            role = , 
                                            application = , 
                                            asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                                            bytes = , 
                                            created = , 
                                            updated = , 
                                            cloud = '', ), 
                                        mechanism = , 
                                        rank = 56, )
                                    ], ), )
                        ], ),
                preview = openapi_client.models.preview.Preview(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    base = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                            id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                            creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                            classification = openapi_client.models.classification.Classification(
                                generic = 'CODE', 
                                specific = 'csx', 
                                rendering = 'HTML', ), 
                            icon = '', 
                            role = 'ORIGINAL', 
                            application = openapi_client.models.application.Application(
                                id = '', 
                                name = 'SUBLIME', 
                                version = '', 
                                platform = 'WEB', 
                                onboarded = True, 
                                privacy = 'OPEN', 
                                capabilities = 'LOCAL', 
                                mechanism = 'MANUAL', 
                                automatic_unload = True, ), 
                            asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                            bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                value = 33600, 
                                readable = '33.6 KB', ), 
                            created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                            deleted = , 
                            synced = , 
                            cloud = '', 
                            fragment = openapi_client.models.fragment_format.FragmentFormat(
                                string = openapi_client.models.transferable_string.TransferableString(
                                    raw = '', 
                                    base64 = '', 
                                    base64_url = '', 
                                    data_url = '', ), 
                                metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                    ext = 'csx', ), ), 
                            file = openapi_client.models.file_format.FileFormat(), 
                            analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                                code = openapi_client.models.code_analysis.CodeAnalysis(
                                    tokenized = [
                                        ''
                                        ], 
                                    language = '', 
                                    type = 'CODE', 
                                    prediction = {
                                        'key' : 1.337
                                        }, 
                                    similarity = {
                                        'key' : 1.337
                                        }, 
                                    top5_colors = [
                                        56
                                        ], 
                                    top5_sorted = [
                                        ''
                                        ], 
                                    id = '', 
                                    analysis = '', 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                            value = 33600, 
                                            readable = '33.6 KB', ), 
                                        quantization = '', 
                                        foundation = 'GPT_3.5', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        provider = 'APPLE', 
                                        cpu = True, 
                                        downloading = True, ), ), 
                                id = '', 
                                format = '', 
                                image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                    id = '', 
                                    ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                        id = '', 
                                        raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                            id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                        hocr = , 
                                        model = openapi_client.models.model.Model(
                                            id = '', 
                                            version = '', 
                                            created = , 
                                            name = '', 
                                            description = '', 
                                            cloud = True, 
                                            type = 'BALANCED', 
                                            usage = 'OCR', 
                                            quantization = '', 
                                            downloaded = True, 
                                            loaded = True, 
                                            unique = '', 
                                            parameters = 1.337, 
                                            cpu = True, 
                                            downloading = True, ), 
                                        image = '', ), 
                                    analysis = '', ), ), 
                            relationship = openapi_client.models.relationship.Relationship(
                                id = '', 
                                embeddings = openapi_client.models.embeddings.Embeddings(
                                    iterable = [
                                        openapi_client.models.embedding.Embedding(
                                            raw = [
                                                1.337
                                                ], 
                                            model = , 
                                            created = , 
                                            updated = , )
                                        ], ), 
                                edges = openapi_client.models.edges.Edges(
                                    iterable = [
                                        openapi_client.models.node.Node(
                                            id = '', 
                                            type = 'TAG', 
                                            root = True, 
                                            created = , )
                                        ], ), 
                                created = , 
                                updated = , ), 
                            activities = openapi_client.models.flattened_activities.FlattenedActivities(
                                iterable = [
                                    openapi_client.models.referenced_activity.ReferencedActivity(
                                        id = '', )
                                    ], ), ), ), 
                    overlay = , ),
                original = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                    reference = openapi_client.models.flattened_format_[dag_safety].FlattenedFormat [DAG Safety](
                        id = '102ff265-fdfb-4142-8d94-4932d400199c', 
                        creator = '497f6eca-6276-4993-bfeb-53cbbbba6f08', 
                        classification = openapi_client.models.classification.Classification(
                            generic = 'CODE', 
                            specific = 'csx', 
                            rendering = 'HTML', ), 
                        icon = '', 
                        role = 'ORIGINAL', 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        asset = '6a2f41a3-c54c-fce8-32d2-0324e1c32e22', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        synced = , 
                        cloud = '', 
                        fragment = openapi_client.models.fragment_format.FragmentFormat(
                            string = openapi_client.models.transferable_string.TransferableString(
                                raw = '', 
                                base64 = '', 
                                base64_url = '', 
                                data_url = '', ), 
                            metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                ext = 'csx', ), ), 
                        file = openapi_client.models.file_format.FileFormat(), 
                        analysis = openapi_client.models.flattened_analysis.FlattenedAnalysis(
                            code = openapi_client.models.code_analysis.CodeAnalysis(
                                tokenized = [
                                    ''
                                    ], 
                                language = '', 
                                type = 'CODE', 
                                prediction = {
                                    'key' : 1.337
                                    }, 
                                similarity = {
                                    'key' : 1.337
                                    }, 
                                top5_colors = [
                                    56
                                    ], 
                                top5_sorted = [
                                    ''
                                    ], 
                                id = '', 
                                analysis = '', 
                                model = openapi_client.models.model.Model(
                                    id = '', 
                                    version = '', 
                                    created = , 
                                    name = '', 
                                    description = '', 
                                    cloud = True, 
                                    type = 'BALANCED', 
                                    usage = 'OCR', 
                                    ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                        value = 33600, 
                                        readable = '33.6 KB', ), 
                                    quantization = '', 
                                    foundation = 'GPT_3.5', 
                                    downloaded = True, 
                                    loaded = True, 
                                    unique = '', 
                                    parameters = 1.337, 
                                    provider = 'APPLE', 
                                    cpu = True, 
                                    downloading = True, ), ), 
                            id = '', 
                            format = '', 
                            image = openapi_client.models.flattened_image_analysis.FlattenedImageAnalysis(
                                id = '', 
                                ocr = openapi_client.models.flattened_ocr_analysis.FlattenedOCRAnalysis(
                                    id = '', 
                                    raw = openapi_client.models.referenced_format_[dag_safety].ReferencedFormat [DAG Safety](
                                        id = '102ff265-fdfb-4142-8d94-4932d400199c', ), 
                                    hocr = , 
                                    model = openapi_client.models.model.Model(
                                        id = '', 
                                        version = '', 
                                        created = , 
                                        name = '', 
                                        description = '', 
                                        cloud = True, 
                                        type = 'BALANCED', 
                                        usage = 'OCR', 
                                        quantization = '', 
                                        downloaded = True, 
                                        loaded = True, 
                                        unique = '', 
                                        parameters = 1.337, 
                                        cpu = True, 
                                        downloading = True, ), 
                                    image = '', ), 
                                analysis = '', ), ), 
                        relationship = openapi_client.models.relationship.Relationship(
                            id = '', 
                            embeddings = openapi_client.models.embeddings.Embeddings(
                                iterable = [
                                    openapi_client.models.embedding.Embedding(
                                        raw = [
                                            1.337
                                            ], 
                                        model = , 
                                        created = , 
                                        updated = , )
                                    ], ), 
                            edges = openapi_client.models.edges.Edges(
                                iterable = [
                                    openapi_client.models.node.Node(
                                        id = '', 
                                        type = 'TAG', 
                                        root = True, 
                                        created = , )
                                    ], ), 
                            created = , 
                            updated = , ), 
                        activities = openapi_client.models.flattened_activities.FlattenedActivities(
                            iterable = [
                                openapi_client.models.referenced_activity.ReferencedActivity(
                                    id = '', )
                                ], ), ), ),
                mechanism = 'MANUAL',
        )
        """

    def testAsset(self):
        """Test Asset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
