# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.models import Models  # noqa: E501

class TestModels(unittest.TestCase):
    """Models unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Models:
        """Test Models
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Models`
        """
        model = Models()  # noqa: E501
        if include_optional:
            return Models(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                iterable = [
                    openapi_client.models.model.Model(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        id = '', 
                        version = '', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        name = '', 
                        description = '', 
                        cloud = True, 
                        type = 'BALANCED', 
                        usage = 'OCR', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        quantization = '', 
                        foundation = 'GPT_3.5', 
                        downloaded = True, 
                        loaded = True, 
                        unique = '', 
                        parameters = 1.337, 
                        provider = 'APPLE', 
                        cpu = True, 
                        downloading = True, )
                    ]
            )
        else:
            return Models(
                iterable = [
                    openapi_client.models.model.Model(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        id = '', 
                        version = '', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        name = '', 
                        description = '', 
                        cloud = True, 
                        type = 'BALANCED', 
                        usage = 'OCR', 
                        bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                            value = 33600, 
                            readable = '33.6 KB', ), 
                        quantization = '', 
                        foundation = 'GPT_3.5', 
                        downloaded = True, 
                        loaded = True, 
                        unique = '', 
                        parameters = 1.337, 
                        provider = 'APPLE', 
                        cpu = True, 
                        downloading = True, )
                    ],
        )
        """

    def testModels(self):
        """Test Models"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
