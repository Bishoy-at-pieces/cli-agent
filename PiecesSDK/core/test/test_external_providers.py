# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.external_providers import ExternalProviders  # noqa: E501

class TestExternalProviders(unittest.TestCase):
    """ExternalProviders unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExternalProviders:
        """Test ExternalProviders
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExternalProviders`
        """
        model = ExternalProviders()  # noqa: E501
        if include_optional:
            return ExternalProviders(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                iterable = [
                    openapi_client.models.external_provider.ExternalProvider(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        type = 'github', 
                        user_id = '', 
                        access_token = '', 
                        expires_in = 56, 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        profile_data = openapi_client.models.external_provider_profile_data.ExternalProviderProfileData(
                            name = '', 
                            picture = '', 
                            nickname = '', 
                            email = '', 
                            email_verified = True, 
                            node_id = '', 
                            gravatar_id = '', 
                            url = '', 
                            html_url = '', 
                            followers_url = '', 
                            following_url = '', 
                            gists_url = '', 
                            starred_url = '', 
                            subscriptions_url = '', 
                            organizations_url = '', 
                            repos_url = '', 
                            events_url = '', 
                            received_events_url = '', 
                            site_admin = True, 
                            company = '', 
                            blog = '', 
                            anchor = '', 
                            hireable = True, 
                            bio = '', 
                            twitter_username = '', 
                            public_repos = 56, 
                            public_gists = 56, 
                            followers = 56, 
                            following = 56, 
                            created_at = '', 
                            updated_at = '', 
                            private_gists = 56, 
                            total_private_repos = 56, 
                            owned_private_repos = 56, 
                            disk_usage = 56, 
                            collaborators = 56, 
                            two_factor_authentication = True, ), 
                        connection = '', 
                        is_social = True, )
                    ]
            )
        else:
            return ExternalProviders(
                iterable = [
                    openapi_client.models.external_provider.ExternalProvider(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        type = 'github', 
                        user_id = '', 
                        access_token = '', 
                        expires_in = 56, 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        profile_data = openapi_client.models.external_provider_profile_data.ExternalProviderProfileData(
                            name = '', 
                            picture = '', 
                            nickname = '', 
                            email = '', 
                            email_verified = True, 
                            node_id = '', 
                            gravatar_id = '', 
                            url = '', 
                            html_url = '', 
                            followers_url = '', 
                            following_url = '', 
                            gists_url = '', 
                            starred_url = '', 
                            subscriptions_url = '', 
                            organizations_url = '', 
                            repos_url = '', 
                            events_url = '', 
                            received_events_url = '', 
                            site_admin = True, 
                            company = '', 
                            blog = '', 
                            anchor = '', 
                            hireable = True, 
                            bio = '', 
                            twitter_username = '', 
                            public_repos = 56, 
                            public_gists = 56, 
                            followers = 56, 
                            following = 56, 
                            created_at = '', 
                            updated_at = '', 
                            private_gists = 56, 
                            total_private_repos = 56, 
                            owned_private_repos = 56, 
                            disk_usage = 56, 
                            collaborators = 56, 
                            two_factor_authentication = True, ), 
                        connection = '', 
                        is_social = True, )
                    ],
        )
        """

    def testExternalProviders(self):
        """Test ExternalProviders"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
