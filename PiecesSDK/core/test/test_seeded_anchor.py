# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.seeded_anchor import SeededAnchor  # noqa: E501

class TestSeededAnchor(unittest.TestCase):
    """SeededAnchor unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SeededAnchor:
        """Test SeededAnchor
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SeededAnchor`
        """
        model = SeededAnchor()  # noqa: E501
        if include_optional:
            return SeededAnchor(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                type = 'FILE',
                watch = True,
                fullpath = '',
                asset = '',
                platform = 'WEB',
                name = '',
                annotations = [
                    openapi_client.models.seeded_annotation.SeededAnnotation(
                        schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                            migration = 56, 
                            semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                        mechanism = 'MANUAL', 
                        asset = '', 
                        person = '', 
                        type = 'DESCRIPTION', 
                        text = '', 
                        model = '', 
                        pseudo = True, 
                        favorited = True, 
                        anchor = '', 
                        conversation = '', 
                        messages = openapi_client.models.flattened_conversation_messages.FlattenedConversationMessages(
                            iterable = [
                                openapi_client.models.referenced_conversation_message.ReferencedConversationMessage(
                                    id = '', 
                                    reference = openapi_client.models.flattened_conversation_message.FlattenedConversationMessage(
                                        id = '', 
                                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                                        deleted = , 
                                        model = openapi_client.models.model.Model(
                                            id = '', 
                                            version = '', 
                                            created = , 
                                            name = '', 
                                            description = '', 
                                            cloud = True, 
                                            type = 'BALANCED', 
                                            usage = 'OCR', 
                                            bytes = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                value = 33600, 
                                                readable = '33.6 KB', ), 
                                            ram = openapi_client.models.byte_descriptor.ByteDescriptor(
                                                value = 33600, 
                                                readable = '33.6 KB', ), 
                                            quantization = '', 
                                            foundation = 'GPT_3.5', 
                                            downloaded = True, 
                                            loaded = True, 
                                            unique = '', 
                                            parameters = 1.337, 
                                            provider = 'APPLE', 
                                            cpu = True, 
                                            downloading = True, ), 
                                        fragment = openapi_client.models.fragment_format.FragmentFormat(
                                            string = openapi_client.models.transferable_string.TransferableString(
                                                raw = '', 
                                                base64 = '', 
                                                base64_url = '', 
                                                data_url = '', ), 
                                            metadata = openapi_client.models.fragment_metadata.FragmentMetadata(
                                                ext = 'csx', ), ), 
                                        conversation = openapi_client.models.referenced_conversation.ReferencedConversation(
                                            id = '', ), 
                                        sentiment = 'LIKE', 
                                        role = 'USER', 
                                        score = openapi_client.models.score.Score(
                                            manual = 56, 
                                            automatic = 56, 
                                            priority = 56, 
                                            reuse = 56, 
                                            update = 56, ), 
                                        annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                                            iterable = [
                                                openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                                    id = '', )
                                                ], 
                                            indices = {
                                                'key' : 56
                                                }, ), ), )
                                ], 
                            indices = {
                                'key' : 56
                                }, 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), ), )
                    ],
                conversation = ''
            )
        else:
            return SeededAnchor(
                type = 'FILE',
                fullpath = '',
        )
        """

    def testSeededAnchor(self):
        """Test SeededAnchor"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
