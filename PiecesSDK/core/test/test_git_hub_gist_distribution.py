# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.git_hub_gist_distribution import GitHubGistDistribution  # noqa: E501

class TestGitHubGistDistribution(unittest.TestCase):
    """GitHubGistDistribution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GitHubGistDistribution:
        """Test GitHubGistDistribution
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GitHubGistDistribution`
        """
        model = GitHubGistDistribution()  # noqa: E501
        if include_optional:
            return GitHubGistDistribution(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                recipients = openapi_client.models.recipients.Recipients(
                    iterable = [
                        openapi_client.models.person_basic_type.PersonBasicType(
                            schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                                migration = 56, 
                                semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                            username = '', 
                            name = '', 
                            picture = '', 
                            email = '', 
                            sourced = 'TWITTER', 
                            url = '', 
                            mailgun = openapi_client.models.mailgun_metadata.MailgunMetadata(
                                message_id = '', ), )
                        ], 
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), ),
                public = True,
                description = '',
                name = '',
                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                deleted = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                github_id = '',
                url = ''
            )
        else:
            return GitHubGistDistribution(
                recipients = openapi_client.models.recipients.Recipients(
                    iterable = [
                        openapi_client.models.person_basic_type.PersonBasicType(
                            schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                                migration = 56, 
                                semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                            username = '', 
                            name = '', 
                            picture = '', 
                            email = '', 
                            sourced = 'TWITTER', 
                            url = '', 
                            mailgun = openapi_client.models.mailgun_metadata.MailgunMetadata(
                                message_id = '', ), )
                        ], 
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), ),
                public = True,
                name = '',
                created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    readable = 'Last week - June 3rd, 3:33 a.m.', ),
                github_id = '',
                url = '',
        )
        """

    def testGitHubGistDistribution(self):
        """Test GitHubGistDistribution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
