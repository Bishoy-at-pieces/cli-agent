# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.conversations_create_from_asset_output import ConversationsCreateFromAssetOutput  # noqa: E501

class TestConversationsCreateFromAssetOutput(unittest.TestCase):
    """ConversationsCreateFromAssetOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConversationsCreateFromAssetOutput:
        """Test ConversationsCreateFromAssetOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConversationsCreateFromAssetOutput`
        """
        model = ConversationsCreateFromAssetOutput()  # noqa: E501
        if include_optional:
            return ConversationsCreateFromAssetOutput(
                var_schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                    migration = 56, 
                    semantic = 'MAJOR_0_MINOR_0_PATCH_1', ),
                conversation = openapi_client.models.referenced_conversation.ReferencedConversation(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '', 
                    reference = openapi_client.models.flattened_conversation.FlattenedConversation(
                        id = '', 
                        name = '', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        favorited = True, 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                            iterable = [
                                openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                    id = '', )
                                ], 
                            indices = {
                                'key' : 56
                                }, 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), ), 
                        messages = openapi_client.models.flattened_conversation_messages.FlattenedConversationMessages(
                            iterable = [
                                openapi_client.models.referenced_conversation_message.ReferencedConversationMessage(
                                    id = '', )
                                ], ), 
                        model = openapi_client.models.referenced_model.ReferencedModel(
                            id = '', ), 
                        assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](), 
                        anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                            iterable = [
                                openapi_client.models.referenced_anchor.ReferencedAnchor(
                                    id = '', )
                                ], ), 
                        type = 'COPILOT', 
                        grounding = openapi_client.models.conversation_grounding.ConversationGrounding(), 
                        score = openapi_client.models.score.Score(
                            manual = 56, 
                            automatic = 56, 
                            priority = 56, 
                            reuse = 56, 
                            update = 56, ), ), )
            )
        else:
            return ConversationsCreateFromAssetOutput(
                conversation = openapi_client.models.referenced_conversation.ReferencedConversation(
                    schema = openapi_client.models.embedded_model_schema.EmbeddedModelSchema(
                        migration = 56, 
                        semantic = 'MAJOR_0_MINOR_0_PATCH_1', ), 
                    id = '', 
                    reference = openapi_client.models.flattened_conversation.FlattenedConversation(
                        id = '', 
                        name = '', 
                        created = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        updated = openapi_client.models.grouped_timestamp.GroupedTimestamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            readable = 'Last week - June 3rd, 3:33 a.m.', ), 
                        deleted = , 
                        favorited = True, 
                        application = openapi_client.models.application.Application(
                            id = '', 
                            name = 'SUBLIME', 
                            version = '', 
                            platform = 'WEB', 
                            onboarded = True, 
                            privacy = 'OPEN', 
                            capabilities = 'LOCAL', 
                            mechanism = 'MANUAL', 
                            automatic_unload = True, ), 
                        annotations = openapi_client.models.flattened_annotations.FlattenedAnnotations(
                            iterable = [
                                openapi_client.models.referenced_annotation.ReferencedAnnotation(
                                    id = '', )
                                ], 
                            indices = {
                                'key' : 56
                                }, 
                            score = openapi_client.models.score.Score(
                                manual = 56, 
                                automatic = 56, 
                                priority = 56, 
                                reuse = 56, 
                                update = 56, ), ), 
                        messages = openapi_client.models.flattened_conversation_messages.FlattenedConversationMessages(
                            iterable = [
                                openapi_client.models.referenced_conversation_message.ReferencedConversationMessage(
                                    id = '', )
                                ], ), 
                        model = openapi_client.models.referenced_model.ReferencedModel(
                            id = '', ), 
                        assets = openapi_client.models.flattened_assets_[dag_safety].FlattenedAssets [DAG Safety](), 
                        anchors = openapi_client.models.flattened_anchors.FlattenedAnchors(
                            iterable = [
                                openapi_client.models.referenced_anchor.ReferencedAnchor(
                                    id = '', )
                                ], ), 
                        type = 'COPILOT', 
                        grounding = openapi_client.models.conversation_grounding.ConversationGrounding(), 
                        score = openapi_client.models.score.Score(
                            manual = 56, 
                            automatic = 56, 
                            priority = 56, 
                            reuse = 56, 
                            update = 56, ), ), ),
        )
        """

    def testConversationsCreateFromAssetOutput(self):
        """Test ConversationsCreateFromAssetOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
